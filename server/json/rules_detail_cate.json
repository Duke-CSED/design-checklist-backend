{"Java Notes": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define\n<code>equals(Object)</code> but not <code>hashCode()</code> aren't truly hash-able because instances that are equivalent according to the\n<code>equals</code> method can return different hashes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Student {  // no hashCode() method; not hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = // okay so far\n          new HashTable&lt;Student, Integer&gt;(); // Noncompliant\n\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Student {  // has hashCode() method; hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n  public int hashCode() {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();\n\n  // ...\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define\n<code>equals(Object)</code> but not <code>hashCode()</code> aren't truly hash-able because instances that are equivalent according to the\n<code>equals</code> method can return different hashes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Student {  // no hashCode() method; not hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = // okay so far\n          new HashTable&lt;Student, Integer&gt;(); // Noncompliant\n\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Student {  // has hashCode() method; hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n  public int hashCode() {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();\n\n  // ...\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2141", "lang": "java", "name": "Classes that don't define \"hashCode()\" should not be used in hashes", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The concept of <code>Optional</code> is that it will be used when <code>null</code> could cause errors. In a way, it replaces <code>null</code>,\nand when <code>Optional</code> is in use, there should never be a question of returning or receiving <code>null</code> from a call.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  if (optional != null) {  // Noncompliant\n    // do something with optional...\n  }\n}\n\n@Nullable // Noncompliant\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  optional.ifPresent(\n    // do something with optional...\n  );\n}\n\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return Optional.empty();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>The concept of <code>Optional</code> is that it will be used when <code>null</code> could cause errors. In a way, it replaces <code>null</code>,\nand when <code>Optional</code> is in use, there should never be a question of returning or receiving <code>null</code> from a call.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  if (optional != null) {  // Noncompliant\n    // do something with optional...\n  }\n}\n\n@Nullable // Noncompliant\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  optional.ifPresent(\n    // do something with optional...\n  );\n}\n\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return Optional.empty();\n}\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S2789", "lang": "java", "name": "\"null\" should not be used with \"Optional\"", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nlead to unexpected behavior. This rule statically validates the correlation of <code>printf</code>-style format strings to their arguments when\ncalling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument '2' is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument '3' is unused\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s = String.format(\"string without arguments\"); // Noncompliant\n\nMessageFormat.format(\"Result '{0}'.\", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result '{0}'  =  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/e4EyAQ\">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nlead to unexpected behavior. This rule statically validates the correlation of <code>printf</code>-style format strings to their arguments when\ncalling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument '2' is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument '3' is unused\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s = String.format(\"string without arguments\"); // Noncompliant\n\nMessageFormat.format(\"Result '{0}'.\", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result '{0}'  =  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/e4EyAQ\">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>", "sysTags": ["cert", "confusing"], "repo": "squid", "key": "squid:S3457", "lang": "java", "name": "Printf-style format strings should be used correctly", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a\n<code>final</code> class <code>protected</code> is confusingly pointless.</p>\n<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a\n<code>final</code> class <code>protected</code> is confusingly pointless.</p>\n<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n</pre>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S2156", "lang": "java", "name": "\"final\" classes should not have \"protected\" members", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be\nencountered by the Java Virtual Machine.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be\nencountered by the Java Virtual Machine.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>", "sysTags": ["error-handling"], "repo": "squid", "key": "squid:S1194", "lang": "java", "name": "\"java.lang.Error\" should not be extended", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint[][] matrix;   // Compliant\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint[][] matrix;   // Compliant\n</pre>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S1197", "lang": "java", "name": "Array designators \"[]\" should be on the type, not the variable", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw\nones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>\nfields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw\nones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>\nfields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>", "sysTags": ["obsolete", "pitfall"], "repo": "squid", "key": "squid:S1596", "lang": "java", "name": "\"Collections.EMPTY_LIST\", \"EMPTY_MAP\", and \"EMPTY_SET\" should not be used", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>With Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>With Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1610", "lang": "java", "name": "Abstract classes without fields should be converted to interfaces", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1611", "lang": "java", "name": "Parentheses should be removed from a single lambda input parameter when its type is inferred", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>\"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check.\nHowever, this will not work as expected when that is the only override.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));  // Prints \"false\" because o2 an Object not a MyClass\n  }\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {  // Ignored; `boolean equals(Object)` also present\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>\"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check.\nHowever, this will not work as expected when that is the only override.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));  // Prints \"false\" because o2 an Object not a MyClass\n  }\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {  // Ignored; `boolean equals(Object)` also present\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S1201", "lang": "java", "name": "\"equals\" method overrides should accept \"Object\" parameters", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,\n<code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return the copy instead.</p>\n<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"yellow\", \"second\"};\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"first\", \"second\"};\n  }\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/374\">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/375\">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zQCuAQ\">CERT, OBJ05-J.</a> - Do not return references to private mutable class members\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QIEVAQ\">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal\n  components </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/kwCuAQ\">CERT, OOP08-CPP.</a> - Do not return references to private data </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,\n<code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return the copy instead.</p>\n<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"yellow\", \"second\"};\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"first\", \"second\"};\n  }\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/374\">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/375\">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zQCuAQ\">CERT, OBJ05-J.</a> - Do not return references to private mutable class members\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QIEVAQ\">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal\n  components </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/kwCuAQ\">CERT, OOP08-CPP.</a> - Do not return references to private data </li>\n</ul>", "sysTags": ["cert", "cwe", "unpredictable"], "repo": "squid", "key": "squid:S2384", "lang": "java", "name": "Mutable members should not be stored or returned directly", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. Perhaps even worse is the case where a child class field varies from the name of a parent class only by case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>private</code> parent class fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. Perhaps even worse is the case where a child class field varies from the name of a parent class only by case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>private</code> parent class fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S2387", "lang": "java", "name": "Child class fields should not shadow parent class fields", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There's no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the\nclass <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>There's no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the\nclass <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S3038", "lang": "java", "name": "Abstract methods should not be redundant", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using <code>super.</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using <code>super.</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2388", "lang": "java", "name": "Inner class calls to super class methods should be unambiguous", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two\n  objects must produce the same integer result. </p>\n  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the\n  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {    // Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/581.html\">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYYbAQ\">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two\n  objects must produce the same integer result. </p>\n  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the\n  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {    // Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/581.html\">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYYbAQ\">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S1206", "lang": "java", "name": "\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact\nin an environment that's not configured just like yours is, your code won't work. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact\nin an environment that's not configured just like yours is, your code won't work. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>", "sysTags": ["lock-in", "maven"], "repo": "squid", "key": "squid:S3422", "lang": "java", "name": "Dependencies should not have \"system\" scope", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is\ninefficient.</p>\n<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew Integer(myInteger).toString();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger.toString(myInteger);        // Compliant\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is\ninefficient.</p>\n<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew Integer(myInteger).toString();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger.toString(myInteger);        // Compliant\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1158", "lang": "java", "name": "Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE's. </p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely\nthrow an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation\ninstead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE's. </p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely\nthrow an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation\ninstead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1695", "lang": "java", "name": "\"NullPointerException\" should not be explicitly thrown", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>\nmethod inherited <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>\n<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName();   //String is a good example of a class overriding the equals method\nString lastName = getLastName();\n\nif (firstName == lastName) { ... };   // Non-compliant, the two literals can have the same value and yet the condition is false\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wwD1AQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/8AEqAQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>\nmethod inherited <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>\n<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName();   //String is a good example of a class overriding the equals method\nString lastName = getLastName();\n\nif (firstName == lastName) { ... };   // Non-compliant, the two literals can have the same value and yet the condition is false\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wwD1AQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/8AEqAQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>", "sysTags": ["cert", "cwe", "suspicious"], "repo": "squid", "key": "squid:S1698", "lang": "java", "name": "\"==\" and \"!=\" should not be used when \"equals\" is overridden", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/6gEqAQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "List of exceptions which should not be checked", "defaultValue": "java.lang.InterruptedException, java.lang.NumberFormatException, java.lang.NoSuchMethodException, java.text.ParseException, java.net.MalformedURLException, java.time.format.DateTimeParseException", "type": "STRING", "key": "exceptions"}], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/6gEqAQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n</ul>", "sysTags": ["cert", "error-handling", "suspicious"], "repo": "squid", "key": "squid:S1166", "lang": "java", "name": "Exception handlers should preserve the original exceptions", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>", "sysTags": ["bad-practice", "cert", "cwe", "error-handling"], "repo": "squid", "key": "squid:S1181", "lang": "java", "name": "Throwable and Error should not be caught", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.</p>\n<pre>\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.</p>\n<pre>\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n</pre>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S1186", "lang": "java", "name": "Methods should not be empty", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding\nwhich could lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  String name = null;\n\n  if (name instanceof String) { // Noncompliant; always false since name is null\n    //...\n  }\n\n  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer\n    doSomething();\n  }\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding\nwhich could lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  String name = null;\n\n  if (name instanceof String) { // Noncompliant; always false since name is null\n    //...\n  }\n\n  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer\n    doSomething();\n  }\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S1850", "lang": "java", "name": "\"instanceof\" operators that always return \"true\" or \"false\" should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>", "sysTags": ["clumsy", "finding"], "repo": "squid", "key": "squid:S1858", "lang": "java", "name": "\"toString()\" should never be called on a String object", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:</p>\n<ul>\n  <li> Class and instance variables </li>\n  <li> Constructors </li>\n  <li> Methods </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo{\n   private int field = 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{\n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:</p>\n<ul>\n  <li> Class and instance variables </li>\n  <li> Constructors </li>\n  <li> Methods </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo{\n   private int field = 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{\n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S1213", "lang": "java", "name": "The members of an interface declaration or class should appear in a pre-defined order", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use\n<em>that</em> last as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,\n<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use\n<em>that</em> last as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,\n<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n</pre>", "sysTags": ["performance"], "repo": "squid", "key": "squid:S3631", "lang": "java", "name": "\"Arrays.stream\" should be used for primitive arrays", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an\n<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Nothing {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Nothing {\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an\n<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Nothing {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Nothing {\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2094", "lang": "java", "name": "Classes should not be empty", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this\nrule.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "30min", "status": "READY", "debtRemFnOffset": "30min", "tags": [], "htmlDesc": "<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this\nrule.</p>", "sysTags": ["design"], "repo": "squid", "key": "squid:S1118", "lang": "java", "name": "Utility classes should not have public constructors", "defaultDebtRemFnOffset": "30min", "defaultRemFnBaseEffort": "30min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it's well named. </p>\n<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at\nthe meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it's well named. </p>\n<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at\nthe meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n</pre>", "sysTags": ["design"], "repo": "squid", "key": "squid:S2301", "lang": "java", "name": "Public methods should not contain selector arguments", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky\nand difficult to get right, according to Joshua Bloch:</p>\n<blockquote>\n  Object's clone method is very tricky. It's based on field copies, and it's \"extra-linguistic.\" It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and\n  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow\n  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n</blockquote>\n<p>A copy constructor or copy factory should be used instead.</p>\n<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://www.artima.com/intv/bloch13.html\">Copy Constructor versus Cloning</a> </li>\n</ul>\n<h3>See Also</h3>\n<ul>\n  <li> {rule:squid:S2157} - \"Cloneables\" should implement \"clone\" </li>\n  <li> {rule:squid:S1182} - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "30min", "status": "READY", "debtRemFnOffset": "30min", "tags": [], "htmlDesc": "<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky\nand difficult to get right, according to Joshua Bloch:</p>\n<blockquote>\n  Object's clone method is very tricky. It's based on field copies, and it's \"extra-linguistic.\" It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and\n  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow\n  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n</blockquote>\n<p>A copy constructor or copy factory should be used instead.</p>\n<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://www.artima.com/intv/bloch13.html\">Copy Constructor versus Cloning</a> </li>\n</ul>\n<h3>See Also</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=squid%3AS2157'>S2157</a> - \"Cloneables\" should implement \"clone\" </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" </li>\n</ul>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2975", "lang": "java", "name": "\"clone\" should not be overridden", "defaultDebtRemFnOffset": "30min", "defaultRemFnBaseEffort": "30min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "The maximum number of lines allowed", "defaultValue": "25", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S2972", "lang": "java", "name": "Inner classes should not have too many lines of code", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/e4EyAQ\">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/e4EyAQ\">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>", "sysTags": ["cert", "pitfall"], "repo": "squid", "key": "squid:S2275", "lang": "java", "name": "Printf-style format strings should not lead to unexpected behavior at runtime", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of\nnon-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>\n<p>This rule looks for classes that do all of the following:</p>\n<ul>\n  <li> extend classes that override <code>equals</code>. </li>\n  <li> do not themselves override <code>equals</code>. </li>\n  <li> add fields. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method\n  private Color ripeColor;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj = (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "30min", "status": "READY", "debtRemFnOffset": "30min", "tags": [], "htmlDesc": "<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of\nnon-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>\n<p>This rule looks for classes that do all of the following:</p>\n<ul>\n  <li> extend classes that override <code>equals</code>. </li>\n  <li> do not themselves override <code>equals</code>. </li>\n  <li> add fields. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method\n  private Color ripeColor;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj = (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n</pre>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2160", "lang": "java", "name": "Subclasses that add fields should override \"equals\"", "defaultDebtRemFnOffset": "30min", "defaultRemFnBaseEffort": "30min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way\nto understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>\n<p>The following Javadoc elements are required:</p>\n<ul>\n  <li> Parameters, using <code>@param parameterName</code>. </li>\n  <li> Method return values, using <code>@return</code>. </li>\n  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>\n</ul>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li> Getters and setters. </li>\n  <li> Methods with @Override annotation. </li>\n  <li> Empty constructors. </li>\n  <li> Static constants. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'\n\n  public static final DEFAULT_STATUS = 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; ...\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * @param value ...\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Pattern of classes which should adhere to this constraint. Ex : *<strong>.api.</strong>*", "defaultValue": "**.api.**", "type": "STRING", "key": "forClasses"}, {"htmlDesc": "Pattern of classes which are excluded from adhering to this constraint.", "defaultValue": "**.internal.**", "type": "STRING", "key": "exclusion"}], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way\nto understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>\n<p>The following Javadoc elements are required:</p>\n<ul>\n  <li> Parameters, using <code>@param parameterName</code>. </li>\n  <li> Method return values, using <code>@return</code>. </li>\n  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>\n</ul>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li> Getters and setters. </li>\n  <li> Methods with @Override annotation. </li>\n  <li> Empty constructors. </li>\n  <li> Static constants. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'\n\n  public static final DEFAULT_STATUS = 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; ...\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * @param value ...\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S1176", "key": "squid:UndocumentedApi", "lang": "java", "name": "Public types, methods and fields (API) should be documented with Javadoc", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation\nthat a class' name will indicate what it is and/or does.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation\nthat a class' name will indicate what it is and/or does.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>", "sysTags": ["convention", "pitfall"], "repo": "squid", "key": "squid:S2166", "lang": "java", "name": "Classes named like \"Exception\" should extend \"Exception\" or a subclass", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access. </p>\n<p>Instead, the <code>instanceof</code> operator should be used to check the object's underlying type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/486.html\">MITRE, CWE-486</a> - Comparison of Classes by Name </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/LAFlAQ\">CERT, OBJ09-J.</a> - Compare classes and not class names </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access. </p>\n<p>Instead, the <code>instanceof</code> operator should be used to check the object's underlying type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/486.html\">MITRE, CWE-486</a> - Comparison of Classes by Name </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/LAFlAQ\">CERT, OBJ09-J.</a> - Compare classes and not class names </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S1872", "lang": "java", "name": "Classes should not be compared by name", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLORS.RED);\n    warm.add(COLORS.ORANGE);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    EnumSet&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLORS.RED);\n    warm.add(COLORS.ORANGE);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    EnumSet&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>", "sysTags": ["performance"], "repo": "squid", "key": "squid:S1641", "lang": "java", "name": "Sets with elements that are enum values should be replaced with EnumSet", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more\nefficient than other sets because the underlying data structure is a simple array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;COLOR, String&gt; (COLOR.class);\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more\nefficient than other sets because the underlying data structure is a simple array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;COLOR, String&gt; (COLOR.class);\n  }\n}\n</pre>", "sysTags": ["performance"], "repo": "squid", "key": "squid:S1640", "lang": "java", "name": "Maps with keys that are enum values should be replaced with EnumMap", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>", "sysTags": ["performance"], "repo": "squid", "key": "squid:S1643", "lang": "java", "name": "Strings should not be concatenated using '+' in a loop", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>", "sysTags": ["performance"], "repo": "squid", "key": "squid:S2864", "lang": "java", "name": "\"entrySet()\" should be iterated when both the key and value are needed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/568.html\">MITRE, CWE-568</a> - finalize() Method Without super.finalize() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/568.html\">MITRE, CWE-568</a> - finalize() Method Without super.finalize() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "internalKey": "S1114", "key": "squid:ObjectFinalizeOverridenCallsSuperFinalizeCheck", "lang": "java", "name": "\"super.finalize()\" should be called at the end of \"Object.finalize()\" implementations", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that's not the case\nwhen:</p>\n<ul>\n  <li> the parent class method is <code>static</code> and the child class method is not. </li>\n  <li> the arguments or return types of the child method are in different packages than those of the parent method. </li>\n  <li> the parent class method is <code>private</code>. </li>\n</ul>\n<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent\ndeclaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then\nthe method should be renamed to prevent confusion. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport fruit.Pear;\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // Noncompliant; this is not an override\n    // ...\n  }\n\n\n  public void doSomethingElse() {  // Noncompliant; parent method is static\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport computer.Pear;  // import corrected\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // true override (see import)\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "30min", "status": "READY", "debtRemFnOffset": "30min", "tags": [], "htmlDesc": "<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that's not the case\nwhen:</p>\n<ul>\n  <li> the parent class method is <code>static</code> and the child class method is not. </li>\n  <li> the arguments or return types of the child method are in different packages than those of the parent method. </li>\n  <li> the parent class method is <code>private</code>. </li>\n</ul>\n<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent\ndeclaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then\nthe method should be renamed to prevent confusion. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport fruit.Pear;\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // Noncompliant; this is not an override\n    // ...\n  }\n\n\n  public void doSomethingElse() {  // Noncompliant; parent method is static\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport computer.Pear;  // import corrected\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // true override (see import)\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2177", "lang": "java", "name": "Child class methods named for parent class methods should be overrides", "defaultDebtRemFnOffset": "30min", "defaultRemFnBaseEffort": "30min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>\nmethods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>\nmethods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>", "sysTags": ["multi-threading"], "repo": "squid", "key": "squid:S2696", "lang": "java", "name": "Instance methods should not write to \"static\" fields", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary. </p>\n<p>If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it. </p>\n<p>However, while a nested/<code>static</code> class would be more efficient, it's worth nothing that there are semantic differences between an inner\nclass and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary. </p>\n<p>If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it. </p>\n<p>However, while a nested/<code>static</code> class would be more efficient, it's worth nothing that there are semantic differences between an inner\nclass and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>", "sysTags": ["performance"], "repo": "squid", "key": "squid:S2694", "lang": "java", "name": "Inner classes which do not reference their owning classes should be \"static\"", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.</p>\n<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.</p>\n<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1711", "lang": "java", "name": "Standard functional interfaces should not be redefined", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/AgG7AQ\">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an\n  empty array over a null value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zwHEAw\">CERT, MET55-J.</a> - Return an empty array or collection instead of a null\n  value for methods that return an array or collection </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "30min", "status": "READY", "debtRemFnOffset": "30min", "tags": [], "htmlDesc": "<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/AgG7AQ\">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an\n  empty array over a null value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zwHEAw\">CERT, MET55-J.</a> - Return an empty array or collection instead of a null\n  value for methods that return an array or collection </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1168", "lang": "java", "name": "Empty arrays and collections should be returned instead of null", "defaultDebtRemFnOffset": "30min", "defaultRemFnBaseEffort": "30min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Exceptions are meant to represent the application's state at the point at which an error occurred.</p>\n<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>\n<ul>\n  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>\n  <li> Won't be updated or corrupted by a questionable error handler. </li>\n</ul>\n<p>This will enable developers to quickly understand what went wrong.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Exceptions are meant to represent the application's state at the point at which an error occurred.</p>\n<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>\n<ul>\n  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>\n  <li> Won't be updated or corrupted by a questionable error handler. </li>\n</ul>\n<p>This will enable developers to quickly understand what went wrong.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>", "sysTags": ["error-handling"], "repo": "squid", "key": "squid:S1165", "lang": "java", "name": "Exception classes should be immutable", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.</p>\n<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.</p>\n<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>", "sysTags": ["error-handling"], "repo": "squid", "key": "squid:S1160", "lang": "java", "name": "Public methods should throw at most one checked exception", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Constructors for <code>Strings</code> and the objects used to wrap primitives should never be used. Doing so is less clear and uses more memory\nthan simply using the desired value in the case of strings, and using <code>valueOf</code> for everything else.</p>\n<p>Further, these constructors are deprecated in Java 9, which is an indication that they will eventually be removed from the language altogether.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Constructors for <code>Strings</code> and the objects used to wrap primitives should never be used. Doing so is less clear and uses more memory\nthan simply using the desired value in the case of strings, and using <code>valueOf</code> for everything else.</p>\n<p>Further, these constructors are deprecated in Java 9, which is an indication that they will eventually be removed from the language altogether.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\n</pre>", "sysTags": ["performance"], "repo": "squid", "key": "squid:S2129", "lang": "java", "name": "Constructors should not be used to instantiate \"String\" and primitive-wrapper classes", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn't deprecated\n    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KgAVAg\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn't deprecated\n    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KgAVAg\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n</ul>", "sysTags": ["cert", "cwe", "obsolete"], "repo": "squid", "internalKey": "S1874", "key": "squid:CallToDeprecatedMethod", "lang": "java", "name": "\"@Deprecated\" code should not be used", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>From the official Oracle Javadoc:</p>\n<blockquote>\n  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "30min", "status": "READY", "debtRemFnOffset": "30min", "tags": [], "htmlDesc": "<p>From the official Oracle Javadoc:</p>\n<blockquote>\n  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>", "sysTags": ["obsolete"], "repo": "squid", "key": "squid:S1150", "lang": "java", "name": "Enumeration should not be implemented", "defaultDebtRemFnOffset": "30min", "defaultRemFnBaseEffort": "30min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can\nbe more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations\nof <code>size()</code> can be <code>O(n)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myCollection.size() == 0) {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can\nbe more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations\nof <code>size()</code> can be <code>O(n)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myCollection.size() == 0) {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1155", "lang": "java", "name": "Collection.isEmpty() should be used to test for emptiness", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'\n<code>.class</code> property.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass c = MyObject.class;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'\n<code>.class</code> property.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass c = MyObject.class;\n</pre>", "sysTags": ["performance"], "repo": "squid", "key": "squid:S2133", "lang": "java", "name": "Objects should not be created only to \"getClass\"", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'\n<code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>\nargument should be avoided, as should concatenating empty string <code>\"\"</code> to a primitive.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\nmyIntString = 4 + \"\";  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'\n<code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>\nargument should be avoided, as should concatenating empty string <code>\"\"</code> to a primitive.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\nmyIntString = 4 + \"\";  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>", "sysTags": ["performance"], "repo": "squid", "key": "squid:S2131", "lang": "java", "name": "Primitives should not be boxed just for \"String\" conversion", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Files with no lines of code clutter a project and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Files with no lines of code clutter a project and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>", "sysTags": ["unused"], "repo": "squid", "internalKey": "S2309", "key": "squid:EmptyFile", "lang": "java", "name": "Files should not be empty", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is\nsymmetric. </p>\n<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the\nparent is not an <code>instanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a\nnew implementation of <code>equals</code>):</p>\n<pre>\nFruit fruit = new Fruit();\nRaspberry raspberry = new Raspberry();\n\nif (raspberry instanceof Fruit) { ... } // true\nif (fruit instanceof Raspberry) { ... } // false\n</pre>\n<p>If similar <code>instanceof</code> checks were used in the classes' <code>equals</code> methods, the symmetry principle would be broken:</p>\n<pre>\nraspberry.equals(fruit); // false\nfruit.equals(raspberry); //true\n</pre>\n<p>Additionally, non <code>final</code> classes shouldn't use a hardcoded class name in the <code>equals</code> method because doing so breaks the\nmethod for subclasses. Instead, make the comparison dynamic.</p>\n<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while\n<code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class\n      // ...\n    }\n    //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (this.getClass() == obj.getClass()) {\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    return false;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zIUbAQ\">CERT, MET08-J.</a> - Preserve the equality contract when overriding the\n  equals() method </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is\nsymmetric. </p>\n<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the\nparent is not an <code>instanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a\nnew implementation of <code>equals</code>):</p>\n<pre>\nFruit fruit = new Fruit();\nRaspberry raspberry = new Raspberry();\n\nif (raspberry instanceof Fruit) { ... } // true\nif (fruit instanceof Raspberry) { ... } // false\n</pre>\n<p>If similar <code>instanceof</code> checks were used in the classes' <code>equals</code> methods, the symmetry principle would be broken:</p>\n<pre>\nraspberry.equals(fruit); // false\nfruit.equals(raspberry); //true\n</pre>\n<p>Additionally, non <code>final</code> classes shouldn't use a hardcoded class name in the <code>equals</code> method because doing so breaks the\nmethod for subclasses. Instead, make the comparison dynamic.</p>\n<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while\n<code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class\n      // ...\n    }\n    //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (this.getClass() == obj.getClass()) {\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    return false;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zIUbAQ\">CERT, MET08-J.</a> - Preserve the equality contract when overriding the\n  equals() method </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2162", "lang": "java", "name": "\"equals\" methods should be symmetric and work for subclasses", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n  <p>The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\" </p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on\n<code>equals()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n  <p>The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\" </p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on\n<code>equals()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S1210", "lang": "java", "name": "\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only\n<code>static</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>See Also</h2>\n<ul>\n  <li> {rule:squid:S1118} - Utility classes should not have public constructors </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only\n<code>static</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>See Also</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1118'>S1118</a> - Utility classes should not have public constructors </li>\n</ul>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2440", "lang": "java", "name": "Classes with only \"static\" methods should not be instantiated", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}], "Communication": [{"Meaningful names": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2147", "lang": "java", "name": "Catches should be combined", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1604", "lang": "java", "name": "Anonymous inner classes containing only one method should become lambdas", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "INFO", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "sysTags": ["obsolete"], "repo": "squid", "key": "squid:S1133", "lang": "java", "name": "Deprecated code should be removed", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2154", "lang": "java", "name": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S1199", "lang": "java", "name": "Nested code blocks should not be used", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2153", "lang": "java", "name": "Boxing and unboxing should not be immediately reversed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "sysTags": ["obsolete", "pitfall"], "repo": "squid", "key": "squid:S1190", "lang": "java", "name": "Future keywords should not be used as names", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S2959", "lang": "java", "name": "Unnecessary semicolons should be omitted", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1125", "lang": "java", "name": "Boolean literals should not be redundant", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1126", "lang": "java", "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "sysTags": ["confusing"], "repo": "squid", "internalKey": "S1110", "key": "squid:UselessParenthesesCheck", "lang": "java", "name": "Redundant pairs of parentheses should be removed", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2097", "lang": "java", "name": "\"equals(Object obj)\" should test argument type", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:squid:S1656} - Implements a check on <code>=</code>. </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1764", "lang": "java", "name": "Identical expressions should not be used on both sides of a binary operator", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1066", "lang": "java", "name": "Collapsible \"if\" statements should be merged", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S1068", "lang": "java", "name": "Unused \"private\" fields should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S3923", "lang": "java", "name": "All branches in a conditional structure should not have exactly the same implementation", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "cwe", "misra", "redundant"], "repo": "squid", "key": "squid:S2589", "lang": "java", "name": "Boolean expressions should not be gratuitous", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1488", "lang": "java", "name": "Local Variables should not be declared and then immediately returned or thrown", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Comma separated list of authorized numbers. Example: -1,0,1,2", "defaultValue": "-1,0,1", "type": "STRING", "key": "Authorized numbers"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S109", "lang": "java", "name": "Magic numbers should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "sysTags": ["unused"], "repo": "squid", "key": "squid:S1481", "lang": "java", "name": "Unused local variables should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "sysTags": ["suspicious"], "repo": "squid", "internalKey": "S108", "key": "squid:S00108", "lang": "java", "name": "Nested blocks of code should not be left empty", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the class names against.", "defaultValue": "^[A-Z][a-zA-Z0-9]*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S101", "key": "squid:S00101", "lang": "java", "name": "Class names should comply with a naming convention", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S1170", "lang": "java", "name": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2178", "lang": "java", "name": "Short-circuit logic should be used in boolean contexts", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2175", "lang": "java", "name": "Inappropriate \"Collection\" calls should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "sysTags": ["unused"], "repo": "squid", "internalKey": "S1128", "key": "squid:UselessImportCheck", "lang": "java", "name": "Useless imports should be removed", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2293", "lang": "java", "name": "The diamond operator (\"<>\") should be used", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2114", "lang": "java", "name": "Collections should not be passed as arguments to their own methods", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "3min", "status": "READY", "debtRemFnOffset": "3min", "tags": [], "htmlDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1656", "lang": "java", "name": "Variables should not be self-assigned", "defaultDebtRemFnOffset": "3min", "defaultRemFnBaseEffort": "3min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "sysTags": ["cert", "misra"], "repo": "squid", "key": "squid:S881", "lang": "java", "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2692", "lang": "java", "name": "\"indexOf\" checks should not be for positive numbers", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1710", "lang": "java", "name": "Annotation repetitions should not be wrapped", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the constant names against.", "defaultValue": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S115", "key": "squid:S00115", "lang": "java", "name": "Constant names should comply with a naming convention", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "error-handling"], "repo": "squid", "internalKey": "S112", "key": "squid:S00112", "lang": "java", "name": "Generic exceptions should never be thrown", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "sysTags": ["misra"], "repo": "squid", "key": "squid:S1244", "lang": "java", "name": "Floating point numbers should not be tested for equality", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2185", "lang": "java", "name": "Silly math should not be performed", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1221", "lang": "java", "name": "Methods should not be named \"hashcode\" or \"equal\"", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S2681", "lang": "java", "name": "Multiline blocks should be enclosed in curly braces", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S2159", "lang": "java", "name": "Silly equality checks should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1157", "lang": "java", "name": "Case insensitive string comparisons should be made without intermediate upper or lower casing", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "sysTags": ["style"], "repo": "squid", "internalKey": "S122", "key": "squid:S00122", "lang": "java", "name": "Statements should be on separate lines", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "misra", "pitfall"], "repo": "squid", "internalKey": "S121", "key": "squid:S00121", "lang": "java", "name": "Control structures should use curly braces", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "sysTags": ["confusing", "redundant"], "repo": "squid", "key": "squid:S1942", "lang": "java", "name": "Simple class names should be used", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"key": "squid:S135", "debtRemFnType": "LINEAR", "gapDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "mdDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "defaultRemFnType": "LINEAR", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "LINEAR", "isTemplate": false, "defaultDebtRemFnCoeff": "20min", "remFnType": "LINEAR", "params": [], "type": "CODE_SMELL", "status": "READY", "tags": [], "htmlDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "remFnGapMultiplier": "20min", "defaultRemFnGapMultiplier": "20min", "lang": "java", "name": "Loops should not contain more than a single \"break\" or \"continue\" statement", "remFnOverloaded": false, "debtRemFnCoeff": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1941", "lang": "java", "name": "Variables should not be declared before they are relevant", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1223", "lang": "java", "name": "Non-constructor methods should not have the same name as the enclosing class", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "sysTags": ["error-handling"], "repo": "squid", "key": "squid:S1148", "lang": "java", "name": "Throwable.printStackTrace(...) should not be called", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "sysTags": ["unpredictable"], "repo": "squid", "key": "squid:S2200", "lang": "java", "name": "\"compareTo\" results should not be checked for specific values", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S3358", "lang": "java", "name": "Ternary operators should not be nested", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2208", "lang": "java", "name": "Wildcard imports should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"No magic values": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2147", "lang": "java", "name": "Catches should be combined", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1604", "lang": "java", "name": "Anonymous inner classes containing only one method should become lambdas", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "INFO", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "sysTags": ["obsolete"], "repo": "squid", "key": "squid:S1133", "lang": "java", "name": "Deprecated code should be removed", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2154", "lang": "java", "name": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S1199", "lang": "java", "name": "Nested code blocks should not be used", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2153", "lang": "java", "name": "Boxing and unboxing should not be immediately reversed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "sysTags": ["obsolete", "pitfall"], "repo": "squid", "key": "squid:S1190", "lang": "java", "name": "Future keywords should not be used as names", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S2959", "lang": "java", "name": "Unnecessary semicolons should be omitted", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1125", "lang": "java", "name": "Boolean literals should not be redundant", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1126", "lang": "java", "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "sysTags": ["confusing"], "repo": "squid", "internalKey": "S1110", "key": "squid:UselessParenthesesCheck", "lang": "java", "name": "Redundant pairs of parentheses should be removed", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2097", "lang": "java", "name": "\"equals(Object obj)\" should test argument type", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:squid:S1656} - Implements a check on <code>=</code>. </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1764", "lang": "java", "name": "Identical expressions should not be used on both sides of a binary operator", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1066", "lang": "java", "name": "Collapsible \"if\" statements should be merged", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S1068", "lang": "java", "name": "Unused \"private\" fields should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S3923", "lang": "java", "name": "All branches in a conditional structure should not have exactly the same implementation", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "cwe", "misra", "redundant"], "repo": "squid", "key": "squid:S2589", "lang": "java", "name": "Boolean expressions should not be gratuitous", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1488", "lang": "java", "name": "Local Variables should not be declared and then immediately returned or thrown", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Comma separated list of authorized numbers. Example: -1,0,1,2", "defaultValue": "-1,0,1", "type": "STRING", "key": "Authorized numbers"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S109", "lang": "java", "name": "Magic numbers should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "sysTags": ["unused"], "repo": "squid", "key": "squid:S1481", "lang": "java", "name": "Unused local variables should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "sysTags": ["suspicious"], "repo": "squid", "internalKey": "S108", "key": "squid:S00108", "lang": "java", "name": "Nested blocks of code should not be left empty", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the class names against.", "defaultValue": "^[A-Z][a-zA-Z0-9]*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S101", "key": "squid:S00101", "lang": "java", "name": "Class names should comply with a naming convention", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S1170", "lang": "java", "name": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2178", "lang": "java", "name": "Short-circuit logic should be used in boolean contexts", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2175", "lang": "java", "name": "Inappropriate \"Collection\" calls should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "sysTags": ["unused"], "repo": "squid", "internalKey": "S1128", "key": "squid:UselessImportCheck", "lang": "java", "name": "Useless imports should be removed", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2293", "lang": "java", "name": "The diamond operator (\"<>\") should be used", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2114", "lang": "java", "name": "Collections should not be passed as arguments to their own methods", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "3min", "status": "READY", "debtRemFnOffset": "3min", "tags": [], "htmlDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1656", "lang": "java", "name": "Variables should not be self-assigned", "defaultDebtRemFnOffset": "3min", "defaultRemFnBaseEffort": "3min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "sysTags": ["cert", "misra"], "repo": "squid", "key": "squid:S881", "lang": "java", "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2692", "lang": "java", "name": "\"indexOf\" checks should not be for positive numbers", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1710", "lang": "java", "name": "Annotation repetitions should not be wrapped", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the constant names against.", "defaultValue": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S115", "key": "squid:S00115", "lang": "java", "name": "Constant names should comply with a naming convention", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "error-handling"], "repo": "squid", "internalKey": "S112", "key": "squid:S00112", "lang": "java", "name": "Generic exceptions should never be thrown", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "sysTags": ["misra"], "repo": "squid", "key": "squid:S1244", "lang": "java", "name": "Floating point numbers should not be tested for equality", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2185", "lang": "java", "name": "Silly math should not be performed", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1221", "lang": "java", "name": "Methods should not be named \"hashcode\" or \"equal\"", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S2681", "lang": "java", "name": "Multiline blocks should be enclosed in curly braces", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S2159", "lang": "java", "name": "Silly equality checks should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1157", "lang": "java", "name": "Case insensitive string comparisons should be made without intermediate upper or lower casing", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "sysTags": ["style"], "repo": "squid", "internalKey": "S122", "key": "squid:S00122", "lang": "java", "name": "Statements should be on separate lines", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "misra", "pitfall"], "repo": "squid", "internalKey": "S121", "key": "squid:S00121", "lang": "java", "name": "Control structures should use curly braces", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "sysTags": ["confusing", "redundant"], "repo": "squid", "key": "squid:S1942", "lang": "java", "name": "Simple class names should be used", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"key": "squid:S135", "debtRemFnType": "LINEAR", "gapDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "mdDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "defaultRemFnType": "LINEAR", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "LINEAR", "isTemplate": false, "defaultDebtRemFnCoeff": "20min", "remFnType": "LINEAR", "params": [], "type": "CODE_SMELL", "status": "READY", "tags": [], "htmlDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "remFnGapMultiplier": "20min", "defaultRemFnGapMultiplier": "20min", "lang": "java", "name": "Loops should not contain more than a single \"break\" or \"continue\" statement", "remFnOverloaded": false, "debtRemFnCoeff": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1941", "lang": "java", "name": "Variables should not be declared before they are relevant", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1223", "lang": "java", "name": "Non-constructor methods should not have the same name as the enclosing class", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "sysTags": ["error-handling"], "repo": "squid", "key": "squid:S1148", "lang": "java", "name": "Throwable.printStackTrace(...) should not be called", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "sysTags": ["unpredictable"], "repo": "squid", "key": "squid:S2200", "lang": "java", "name": "\"compareTo\" results should not be checked for specific values", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S3358", "lang": "java", "name": "Ternary operators should not be nested", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2208", "lang": "java", "name": "Wildcard imports should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"Readable code": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2147", "lang": "java", "name": "Catches should be combined", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1604", "lang": "java", "name": "Anonymous inner classes containing only one method should become lambdas", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "INFO", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "sysTags": ["obsolete"], "repo": "squid", "key": "squid:S1133", "lang": "java", "name": "Deprecated code should be removed", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2154", "lang": "java", "name": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S1199", "lang": "java", "name": "Nested code blocks should not be used", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2153", "lang": "java", "name": "Boxing and unboxing should not be immediately reversed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "sysTags": ["obsolete", "pitfall"], "repo": "squid", "key": "squid:S1190", "lang": "java", "name": "Future keywords should not be used as names", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S2959", "lang": "java", "name": "Unnecessary semicolons should be omitted", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1125", "lang": "java", "name": "Boolean literals should not be redundant", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1126", "lang": "java", "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "sysTags": ["confusing"], "repo": "squid", "internalKey": "S1110", "key": "squid:UselessParenthesesCheck", "lang": "java", "name": "Redundant pairs of parentheses should be removed", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2097", "lang": "java", "name": "\"equals(Object obj)\" should test argument type", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:squid:S1656} - Implements a check on <code>=</code>. </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1764", "lang": "java", "name": "Identical expressions should not be used on both sides of a binary operator", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1066", "lang": "java", "name": "Collapsible \"if\" statements should be merged", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S1068", "lang": "java", "name": "Unused \"private\" fields should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S3923", "lang": "java", "name": "All branches in a conditional structure should not have exactly the same implementation", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "cwe", "misra", "redundant"], "repo": "squid", "key": "squid:S2589", "lang": "java", "name": "Boolean expressions should not be gratuitous", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1488", "lang": "java", "name": "Local Variables should not be declared and then immediately returned or thrown", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Comma separated list of authorized numbers. Example: -1,0,1,2", "defaultValue": "-1,0,1", "type": "STRING", "key": "Authorized numbers"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S109", "lang": "java", "name": "Magic numbers should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "sysTags": ["unused"], "repo": "squid", "key": "squid:S1481", "lang": "java", "name": "Unused local variables should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "sysTags": ["suspicious"], "repo": "squid", "internalKey": "S108", "key": "squid:S00108", "lang": "java", "name": "Nested blocks of code should not be left empty", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the class names against.", "defaultValue": "^[A-Z][a-zA-Z0-9]*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S101", "key": "squid:S00101", "lang": "java", "name": "Class names should comply with a naming convention", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S1170", "lang": "java", "name": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2178", "lang": "java", "name": "Short-circuit logic should be used in boolean contexts", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2175", "lang": "java", "name": "Inappropriate \"Collection\" calls should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "sysTags": ["unused"], "repo": "squid", "internalKey": "S1128", "key": "squid:UselessImportCheck", "lang": "java", "name": "Useless imports should be removed", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2293", "lang": "java", "name": "The diamond operator (\"<>\") should be used", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2114", "lang": "java", "name": "Collections should not be passed as arguments to their own methods", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "3min", "status": "READY", "debtRemFnOffset": "3min", "tags": [], "htmlDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1656", "lang": "java", "name": "Variables should not be self-assigned", "defaultDebtRemFnOffset": "3min", "defaultRemFnBaseEffort": "3min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "sysTags": ["cert", "misra"], "repo": "squid", "key": "squid:S881", "lang": "java", "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2692", "lang": "java", "name": "\"indexOf\" checks should not be for positive numbers", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1710", "lang": "java", "name": "Annotation repetitions should not be wrapped", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the constant names against.", "defaultValue": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S115", "key": "squid:S00115", "lang": "java", "name": "Constant names should comply with a naming convention", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "error-handling"], "repo": "squid", "internalKey": "S112", "key": "squid:S00112", "lang": "java", "name": "Generic exceptions should never be thrown", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "sysTags": ["misra"], "repo": "squid", "key": "squid:S1244", "lang": "java", "name": "Floating point numbers should not be tested for equality", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2185", "lang": "java", "name": "Silly math should not be performed", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1221", "lang": "java", "name": "Methods should not be named \"hashcode\" or \"equal\"", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S2681", "lang": "java", "name": "Multiline blocks should be enclosed in curly braces", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S2159", "lang": "java", "name": "Silly equality checks should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1157", "lang": "java", "name": "Case insensitive string comparisons should be made without intermediate upper or lower casing", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "sysTags": ["style"], "repo": "squid", "internalKey": "S122", "key": "squid:S00122", "lang": "java", "name": "Statements should be on separate lines", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "misra", "pitfall"], "repo": "squid", "internalKey": "S121", "key": "squid:S00121", "lang": "java", "name": "Control structures should use curly braces", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "sysTags": ["confusing", "redundant"], "repo": "squid", "key": "squid:S1942", "lang": "java", "name": "Simple class names should be used", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"key": "squid:S135", "debtRemFnType": "LINEAR", "gapDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "mdDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "defaultRemFnType": "LINEAR", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "LINEAR", "isTemplate": false, "defaultDebtRemFnCoeff": "20min", "remFnType": "LINEAR", "params": [], "type": "CODE_SMELL", "status": "READY", "tags": [], "htmlDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "remFnGapMultiplier": "20min", "defaultRemFnGapMultiplier": "20min", "lang": "java", "name": "Loops should not contain more than a single \"break\" or \"continue\" statement", "remFnOverloaded": false, "debtRemFnCoeff": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1941", "lang": "java", "name": "Variables should not be declared before they are relevant", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1223", "lang": "java", "name": "Non-constructor methods should not have the same name as the enclosing class", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "sysTags": ["error-handling"], "repo": "squid", "key": "squid:S1148", "lang": "java", "name": "Throwable.printStackTrace(...) should not be called", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "sysTags": ["unpredictable"], "repo": "squid", "key": "squid:S2200", "lang": "java", "name": "\"compareTo\" results should not be checked for specific values", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S3358", "lang": "java", "name": "Ternary operators should not be nested", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2208", "lang": "java", "name": "Wildcard imports should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"Use scope wisely": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2147", "lang": "java", "name": "Catches should be combined", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1604", "lang": "java", "name": "Anonymous inner classes containing only one method should become lambdas", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "INFO", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "sysTags": ["obsolete"], "repo": "squid", "key": "squid:S1133", "lang": "java", "name": "Deprecated code should be removed", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2154", "lang": "java", "name": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S1199", "lang": "java", "name": "Nested code blocks should not be used", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2153", "lang": "java", "name": "Boxing and unboxing should not be immediately reversed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "sysTags": ["obsolete", "pitfall"], "repo": "squid", "key": "squid:S1190", "lang": "java", "name": "Future keywords should not be used as names", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S2959", "lang": "java", "name": "Unnecessary semicolons should be omitted", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1125", "lang": "java", "name": "Boolean literals should not be redundant", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1126", "lang": "java", "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "sysTags": ["confusing"], "repo": "squid", "internalKey": "S1110", "key": "squid:UselessParenthesesCheck", "lang": "java", "name": "Redundant pairs of parentheses should be removed", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2097", "lang": "java", "name": "\"equals(Object obj)\" should test argument type", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:squid:S1656} - Implements a check on <code>=</code>. </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1764", "lang": "java", "name": "Identical expressions should not be used on both sides of a binary operator", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1066", "lang": "java", "name": "Collapsible \"if\" statements should be merged", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S1068", "lang": "java", "name": "Unused \"private\" fields should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S3923", "lang": "java", "name": "All branches in a conditional structure should not have exactly the same implementation", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "cwe", "misra", "redundant"], "repo": "squid", "key": "squid:S2589", "lang": "java", "name": "Boolean expressions should not be gratuitous", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1488", "lang": "java", "name": "Local Variables should not be declared and then immediately returned or thrown", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Comma separated list of authorized numbers. Example: -1,0,1,2", "defaultValue": "-1,0,1", "type": "STRING", "key": "Authorized numbers"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S109", "lang": "java", "name": "Magic numbers should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "sysTags": ["unused"], "repo": "squid", "key": "squid:S1481", "lang": "java", "name": "Unused local variables should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "sysTags": ["suspicious"], "repo": "squid", "internalKey": "S108", "key": "squid:S00108", "lang": "java", "name": "Nested blocks of code should not be left empty", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the class names against.", "defaultValue": "^[A-Z][a-zA-Z0-9]*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S101", "key": "squid:S00101", "lang": "java", "name": "Class names should comply with a naming convention", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S1170", "lang": "java", "name": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2178", "lang": "java", "name": "Short-circuit logic should be used in boolean contexts", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2175", "lang": "java", "name": "Inappropriate \"Collection\" calls should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "sysTags": ["unused"], "repo": "squid", "internalKey": "S1128", "key": "squid:UselessImportCheck", "lang": "java", "name": "Useless imports should be removed", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2293", "lang": "java", "name": "The diamond operator (\"<>\") should be used", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2114", "lang": "java", "name": "Collections should not be passed as arguments to their own methods", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "3min", "status": "READY", "debtRemFnOffset": "3min", "tags": [], "htmlDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1656", "lang": "java", "name": "Variables should not be self-assigned", "defaultDebtRemFnOffset": "3min", "defaultRemFnBaseEffort": "3min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "sysTags": ["cert", "misra"], "repo": "squid", "key": "squid:S881", "lang": "java", "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2692", "lang": "java", "name": "\"indexOf\" checks should not be for positive numbers", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1710", "lang": "java", "name": "Annotation repetitions should not be wrapped", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the constant names against.", "defaultValue": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S115", "key": "squid:S00115", "lang": "java", "name": "Constant names should comply with a naming convention", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "error-handling"], "repo": "squid", "internalKey": "S112", "key": "squid:S00112", "lang": "java", "name": "Generic exceptions should never be thrown", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "sysTags": ["misra"], "repo": "squid", "key": "squid:S1244", "lang": "java", "name": "Floating point numbers should not be tested for equality", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2185", "lang": "java", "name": "Silly math should not be performed", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1221", "lang": "java", "name": "Methods should not be named \"hashcode\" or \"equal\"", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S2681", "lang": "java", "name": "Multiline blocks should be enclosed in curly braces", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S2159", "lang": "java", "name": "Silly equality checks should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1157", "lang": "java", "name": "Case insensitive string comparisons should be made without intermediate upper or lower casing", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "sysTags": ["style"], "repo": "squid", "internalKey": "S122", "key": "squid:S00122", "lang": "java", "name": "Statements should be on separate lines", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "misra", "pitfall"], "repo": "squid", "internalKey": "S121", "key": "squid:S00121", "lang": "java", "name": "Control structures should use curly braces", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "sysTags": ["confusing", "redundant"], "repo": "squid", "key": "squid:S1942", "lang": "java", "name": "Simple class names should be used", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"key": "squid:S135", "debtRemFnType": "LINEAR", "gapDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "mdDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "defaultRemFnType": "LINEAR", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "LINEAR", "isTemplate": false, "defaultDebtRemFnCoeff": "20min", "remFnType": "LINEAR", "params": [], "type": "CODE_SMELL", "status": "READY", "tags": [], "htmlDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "remFnGapMultiplier": "20min", "defaultRemFnGapMultiplier": "20min", "lang": "java", "name": "Loops should not contain more than a single \"break\" or \"continue\" statement", "remFnOverloaded": false, "debtRemFnCoeff": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1941", "lang": "java", "name": "Variables should not be declared before they are relevant", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1223", "lang": "java", "name": "Non-constructor methods should not have the same name as the enclosing class", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "sysTags": ["error-handling"], "repo": "squid", "key": "squid:S1148", "lang": "java", "name": "Throwable.printStackTrace(...) should not be called", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "sysTags": ["unpredictable"], "repo": "squid", "key": "squid:S2200", "lang": "java", "name": "\"compareTo\" results should not be checked for specific values", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S3358", "lang": "java", "name": "Ternary operators should not be nested", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2208", "lang": "java", "name": "Wildcard imports should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"Same level code": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2147", "lang": "java", "name": "Catches should be combined", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1604", "lang": "java", "name": "Anonymous inner classes containing only one method should become lambdas", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "INFO", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "sysTags": ["obsolete"], "repo": "squid", "key": "squid:S1133", "lang": "java", "name": "Deprecated code should be removed", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2154", "lang": "java", "name": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S1199", "lang": "java", "name": "Nested code blocks should not be used", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2153", "lang": "java", "name": "Boxing and unboxing should not be immediately reversed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "sysTags": ["obsolete", "pitfall"], "repo": "squid", "key": "squid:S1190", "lang": "java", "name": "Future keywords should not be used as names", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S2959", "lang": "java", "name": "Unnecessary semicolons should be omitted", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1125", "lang": "java", "name": "Boolean literals should not be redundant", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1126", "lang": "java", "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "sysTags": ["confusing"], "repo": "squid", "internalKey": "S1110", "key": "squid:UselessParenthesesCheck", "lang": "java", "name": "Redundant pairs of parentheses should be removed", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2097", "lang": "java", "name": "\"equals(Object obj)\" should test argument type", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:squid:S1656} - Implements a check on <code>=</code>. </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1764", "lang": "java", "name": "Identical expressions should not be used on both sides of a binary operator", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1066", "lang": "java", "name": "Collapsible \"if\" statements should be merged", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S1068", "lang": "java", "name": "Unused \"private\" fields should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S3923", "lang": "java", "name": "All branches in a conditional structure should not have exactly the same implementation", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "cwe", "misra", "redundant"], "repo": "squid", "key": "squid:S2589", "lang": "java", "name": "Boolean expressions should not be gratuitous", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1488", "lang": "java", "name": "Local Variables should not be declared and then immediately returned or thrown", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Comma separated list of authorized numbers. Example: -1,0,1,2", "defaultValue": "-1,0,1", "type": "STRING", "key": "Authorized numbers"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S109", "lang": "java", "name": "Magic numbers should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "sysTags": ["unused"], "repo": "squid", "key": "squid:S1481", "lang": "java", "name": "Unused local variables should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "sysTags": ["suspicious"], "repo": "squid", "internalKey": "S108", "key": "squid:S00108", "lang": "java", "name": "Nested blocks of code should not be left empty", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the class names against.", "defaultValue": "^[A-Z][a-zA-Z0-9]*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S101", "key": "squid:S00101", "lang": "java", "name": "Class names should comply with a naming convention", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S1170", "lang": "java", "name": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2178", "lang": "java", "name": "Short-circuit logic should be used in boolean contexts", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2175", "lang": "java", "name": "Inappropriate \"Collection\" calls should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "sysTags": ["unused"], "repo": "squid", "internalKey": "S1128", "key": "squid:UselessImportCheck", "lang": "java", "name": "Useless imports should be removed", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2293", "lang": "java", "name": "The diamond operator (\"<>\") should be used", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2114", "lang": "java", "name": "Collections should not be passed as arguments to their own methods", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "3min", "status": "READY", "debtRemFnOffset": "3min", "tags": [], "htmlDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1656", "lang": "java", "name": "Variables should not be self-assigned", "defaultDebtRemFnOffset": "3min", "defaultRemFnBaseEffort": "3min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "sysTags": ["cert", "misra"], "repo": "squid", "key": "squid:S881", "lang": "java", "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2692", "lang": "java", "name": "\"indexOf\" checks should not be for positive numbers", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1710", "lang": "java", "name": "Annotation repetitions should not be wrapped", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the constant names against.", "defaultValue": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S115", "key": "squid:S00115", "lang": "java", "name": "Constant names should comply with a naming convention", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "error-handling"], "repo": "squid", "internalKey": "S112", "key": "squid:S00112", "lang": "java", "name": "Generic exceptions should never be thrown", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "sysTags": ["misra"], "repo": "squid", "key": "squid:S1244", "lang": "java", "name": "Floating point numbers should not be tested for equality", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2185", "lang": "java", "name": "Silly math should not be performed", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1221", "lang": "java", "name": "Methods should not be named \"hashcode\" or \"equal\"", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S2681", "lang": "java", "name": "Multiline blocks should be enclosed in curly braces", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S2159", "lang": "java", "name": "Silly equality checks should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1157", "lang": "java", "name": "Case insensitive string comparisons should be made without intermediate upper or lower casing", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "sysTags": ["style"], "repo": "squid", "internalKey": "S122", "key": "squid:S00122", "lang": "java", "name": "Statements should be on separate lines", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "misra", "pitfall"], "repo": "squid", "internalKey": "S121", "key": "squid:S00121", "lang": "java", "name": "Control structures should use curly braces", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "sysTags": ["confusing", "redundant"], "repo": "squid", "key": "squid:S1942", "lang": "java", "name": "Simple class names should be used", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"key": "squid:S135", "debtRemFnType": "LINEAR", "gapDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "mdDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "defaultRemFnType": "LINEAR", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "LINEAR", "isTemplate": false, "defaultDebtRemFnCoeff": "20min", "remFnType": "LINEAR", "params": [], "type": "CODE_SMELL", "status": "READY", "tags": [], "htmlDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "remFnGapMultiplier": "20min", "defaultRemFnGapMultiplier": "20min", "lang": "java", "name": "Loops should not contain more than a single \"break\" or \"continue\" statement", "remFnOverloaded": false, "debtRemFnCoeff": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1941", "lang": "java", "name": "Variables should not be declared before they are relevant", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1223", "lang": "java", "name": "Non-constructor methods should not have the same name as the enclosing class", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "sysTags": ["error-handling"], "repo": "squid", "key": "squid:S1148", "lang": "java", "name": "Throwable.printStackTrace(...) should not be called", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "sysTags": ["unpredictable"], "repo": "squid", "key": "squid:S2200", "lang": "java", "name": "\"compareTo\" results should not be checked for specific values", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S3358", "lang": "java", "name": "Ternary operators should not be nested", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2208", "lang": "java", "name": "Wildcard imports should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"Concise code": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2147", "lang": "java", "name": "Catches should be combined", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1604", "lang": "java", "name": "Anonymous inner classes containing only one method should become lambdas", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "INFO", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "sysTags": ["obsolete"], "repo": "squid", "key": "squid:S1133", "lang": "java", "name": "Deprecated code should be removed", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2154", "lang": "java", "name": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S1199", "lang": "java", "name": "Nested code blocks should not be used", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2153", "lang": "java", "name": "Boxing and unboxing should not be immediately reversed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "sysTags": ["obsolete", "pitfall"], "repo": "squid", "key": "squid:S1190", "lang": "java", "name": "Future keywords should not be used as names", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S2959", "lang": "java", "name": "Unnecessary semicolons should be omitted", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1125", "lang": "java", "name": "Boolean literals should not be redundant", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1126", "lang": "java", "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "sysTags": ["confusing"], "repo": "squid", "internalKey": "S1110", "key": "squid:UselessParenthesesCheck", "lang": "java", "name": "Redundant pairs of parentheses should be removed", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2097", "lang": "java", "name": "\"equals(Object obj)\" should test argument type", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:squid:S1656} - Implements a check on <code>=</code>. </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1764", "lang": "java", "name": "Identical expressions should not be used on both sides of a binary operator", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1066", "lang": "java", "name": "Collapsible \"if\" statements should be merged", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S1068", "lang": "java", "name": "Unused \"private\" fields should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S3923", "lang": "java", "name": "All branches in a conditional structure should not have exactly the same implementation", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "cwe", "misra", "redundant"], "repo": "squid", "key": "squid:S2589", "lang": "java", "name": "Boolean expressions should not be gratuitous", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1488", "lang": "java", "name": "Local Variables should not be declared and then immediately returned or thrown", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Comma separated list of authorized numbers. Example: -1,0,1,2", "defaultValue": "-1,0,1", "type": "STRING", "key": "Authorized numbers"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S109", "lang": "java", "name": "Magic numbers should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "sysTags": ["unused"], "repo": "squid", "key": "squid:S1481", "lang": "java", "name": "Unused local variables should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "sysTags": ["suspicious"], "repo": "squid", "internalKey": "S108", "key": "squid:S00108", "lang": "java", "name": "Nested blocks of code should not be left empty", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the class names against.", "defaultValue": "^[A-Z][a-zA-Z0-9]*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S101", "key": "squid:S00101", "lang": "java", "name": "Class names should comply with a naming convention", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S1170", "lang": "java", "name": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2178", "lang": "java", "name": "Short-circuit logic should be used in boolean contexts", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2175", "lang": "java", "name": "Inappropriate \"Collection\" calls should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "sysTags": ["unused"], "repo": "squid", "internalKey": "S1128", "key": "squid:UselessImportCheck", "lang": "java", "name": "Useless imports should be removed", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2293", "lang": "java", "name": "The diamond operator (\"<>\") should be used", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2114", "lang": "java", "name": "Collections should not be passed as arguments to their own methods", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "3min", "status": "READY", "debtRemFnOffset": "3min", "tags": [], "htmlDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1656", "lang": "java", "name": "Variables should not be self-assigned", "defaultDebtRemFnOffset": "3min", "defaultRemFnBaseEffort": "3min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "sysTags": ["cert", "misra"], "repo": "squid", "key": "squid:S881", "lang": "java", "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2692", "lang": "java", "name": "\"indexOf\" checks should not be for positive numbers", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1710", "lang": "java", "name": "Annotation repetitions should not be wrapped", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the constant names against.", "defaultValue": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S115", "key": "squid:S00115", "lang": "java", "name": "Constant names should comply with a naming convention", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "error-handling"], "repo": "squid", "internalKey": "S112", "key": "squid:S00112", "lang": "java", "name": "Generic exceptions should never be thrown", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "sysTags": ["misra"], "repo": "squid", "key": "squid:S1244", "lang": "java", "name": "Floating point numbers should not be tested for equality", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2185", "lang": "java", "name": "Silly math should not be performed", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1221", "lang": "java", "name": "Methods should not be named \"hashcode\" or \"equal\"", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S2681", "lang": "java", "name": "Multiline blocks should be enclosed in curly braces", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S2159", "lang": "java", "name": "Silly equality checks should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1157", "lang": "java", "name": "Case insensitive string comparisons should be made without intermediate upper or lower casing", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "sysTags": ["style"], "repo": "squid", "internalKey": "S122", "key": "squid:S00122", "lang": "java", "name": "Statements should be on separate lines", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "misra", "pitfall"], "repo": "squid", "internalKey": "S121", "key": "squid:S00121", "lang": "java", "name": "Control structures should use curly braces", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "sysTags": ["confusing", "redundant"], "repo": "squid", "key": "squid:S1942", "lang": "java", "name": "Simple class names should be used", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"key": "squid:S135", "debtRemFnType": "LINEAR", "gapDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "mdDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "defaultRemFnType": "LINEAR", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "LINEAR", "isTemplate": false, "defaultDebtRemFnCoeff": "20min", "remFnType": "LINEAR", "params": [], "type": "CODE_SMELL", "status": "READY", "tags": [], "htmlDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "remFnGapMultiplier": "20min", "defaultRemFnGapMultiplier": "20min", "lang": "java", "name": "Loops should not contain more than a single \"break\" or \"continue\" statement", "remFnOverloaded": false, "debtRemFnCoeff": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1941", "lang": "java", "name": "Variables should not be declared before they are relevant", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1223", "lang": "java", "name": "Non-constructor methods should not have the same name as the enclosing class", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "sysTags": ["error-handling"], "repo": "squid", "key": "squid:S1148", "lang": "java", "name": "Throwable.printStackTrace(...) should not be called", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "sysTags": ["unpredictable"], "repo": "squid", "key": "squid:S2200", "lang": "java", "name": "\"compareTo\" results should not be checked for specific values", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S3358", "lang": "java", "name": "Ternary operators should not be nested", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2208", "lang": "java", "name": "Wildcard imports should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"No warning": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2147", "lang": "java", "name": "Catches should be combined", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1604", "lang": "java", "name": "Anonymous inner classes containing only one method should become lambdas", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "INFO", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>", "sysTags": ["obsolete"], "repo": "squid", "key": "squid:S1133", "lang": "java", "name": "Deprecated code should be removed", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2154", "lang": "java", "name": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S1199", "lang": "java", "name": "Nested code blocks should not be used", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2153", "lang": "java", "name": "Boxing and unboxing should not be immediately reversed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>", "sysTags": ["obsolete", "pitfall"], "repo": "squid", "key": "squid:S1190", "lang": "java", "name": "Future keywords should not be used as names", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S2959", "lang": "java", "name": "Unnecessary semicolons should be omitted", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1125", "lang": "java", "name": "Boolean literals should not be redundant", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1126", "lang": "java", "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>", "sysTags": ["confusing"], "repo": "squid", "internalKey": "S1110", "key": "squid:UselessParenthesesCheck", "lang": "java", "name": "Redundant pairs of parentheses should be removed", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2097", "lang": "java", "name": "\"equals(Object obj)\" should test argument type", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:squid:S1656} - Implements a check on <code>=</code>. </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1764", "lang": "java", "name": "Identical expressions should not be used on both sides of a binary operator", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1066", "lang": "java", "name": "Collapsible \"if\" statements should be merged", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S1068", "lang": "java", "name": "Unused \"private\" fields should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>s, or to <code>switch</code>es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S3923", "lang": "java", "name": "All branches in a conditional structure should not have exactly the same implementation", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "cwe", "misra", "redundant"], "repo": "squid", "key": "squid:S2589", "lang": "java", "name": "Boolean expressions should not be gratuitous", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1488", "lang": "java", "name": "Local Variables should not be declared and then immediately returned or thrown", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Comma separated list of authorized numbers. Example: -1,0,1,2", "defaultValue": "-1,0,1", "type": "STRING", "key": "Authorized numbers"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S109", "lang": "java", "name": "Magic numbers should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>", "sysTags": ["unused"], "repo": "squid", "key": "squid:S1481", "lang": "java", "name": "Unused local variables should be removed", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>", "sysTags": ["suspicious"], "repo": "squid", "internalKey": "S108", "key": "squid:S00108", "lang": "java", "name": "Nested blocks of code should not be left empty", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the class names against.", "defaultValue": "^[A-Z][a-zA-Z0-9]*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S101", "key": "squid:S00101", "lang": "java", "name": "Class names should comply with a naming convention", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>", "sysTags": ["convention"], "repo": "squid", "key": "squid:S1170", "lang": "java", "name": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2178", "lang": "java", "name": "Short-circuit logic should be used in boolean contexts", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2175", "lang": "java", "name": "Inappropriate \"Collection\" calls should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>", "sysTags": ["unused"], "repo": "squid", "internalKey": "S1128", "key": "squid:UselessImportCheck", "lang": "java", "name": "Useless imports should be removed", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2293", "lang": "java", "name": "The diamond operator (\"<>\") should be used", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2114", "lang": "java", "name": "Collections should not be passed as arguments to their own methods", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "3min", "status": "READY", "debtRemFnOffset": "3min", "tags": [], "htmlDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S1656", "lang": "java", "name": "Variables should not be self-assigned", "defaultDebtRemFnOffset": "3min", "defaultRemFnBaseEffort": "3min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>", "sysTags": ["cert", "misra"], "repo": "squid", "key": "squid:S881", "lang": "java", "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2692", "lang": "java", "name": "\"indexOf\" checks should not be for positive numbers", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1710", "lang": "java", "name": "Annotation repetitions should not be wrapped", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Regular expression used to check the constant names against.", "defaultValue": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$", "type": "STRING", "key": "format"}], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>", "sysTags": ["convention"], "repo": "squid", "internalKey": "S115", "key": "squid:S00115", "lang": "java", "name": "Constant names should comply with a naming convention", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "error-handling"], "repo": "squid", "internalKey": "S112", "key": "squid:S00112", "lang": "java", "name": "Generic exceptions should never be thrown", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>", "sysTags": ["misra"], "repo": "squid", "key": "squid:S1244", "lang": "java", "name": "Floating point numbers should not be tested for equality", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2185", "lang": "java", "name": "Silly math should not be performed", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1221", "lang": "java", "name": "Methods should not be named \"hashcode\" or \"equal\"", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S2681", "lang": "java", "name": "Multiline blocks should be enclosed in curly braces", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>", "sysTags": ["cert", "unused"], "repo": "squid", "key": "squid:S2159", "lang": "java", "name": "Silly equality checks should not be made", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1157", "lang": "java", "name": "Case insensitive string comparisons should be made without intermediate upper or lower casing", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>", "sysTags": ["style"], "repo": "squid", "internalKey": "S122", "key": "squid:S00122", "lang": "java", "name": "Statements should be on separate lines", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>", "sysTags": ["cert", "misra", "pitfall"], "repo": "squid", "internalKey": "S121", "key": "squid:S00121", "lang": "java", "name": "Control structures should use curly braces", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>", "sysTags": ["confusing", "redundant"], "repo": "squid", "key": "squid:S1942", "lang": "java", "name": "Simple class names should be used", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"key": "squid:S135", "debtRemFnType": "LINEAR", "gapDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "mdDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "defaultRemFnType": "LINEAR", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "LINEAR", "isTemplate": false, "defaultDebtRemFnCoeff": "20min", "remFnType": "LINEAR", "params": [], "type": "CODE_SMELL", "status": "READY", "tags": [], "htmlDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement", "remFnGapMultiplier": "20min", "defaultRemFnGapMultiplier": "20min", "lang": "java", "name": "Loops should not contain more than a single \"break\" or \"continue\" statement", "remFnOverloaded": false, "debtRemFnCoeff": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1941", "lang": "java", "name": "Variables should not be declared before they are relevant", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1223", "lang": "java", "name": "Non-constructor methods should not have the same name as the enclosing class", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>", "sysTags": ["error-handling"], "repo": "squid", "key": "squid:S1148", "lang": "java", "name": "Throwable.printStackTrace(...) should not be called", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>", "sysTags": ["unpredictable"], "repo": "squid", "key": "squid:S2200", "lang": "java", "name": "\"compareTo\" results should not be checked for specific values", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S3358", "lang": "java", "name": "Ternary operators should not be nested", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2208", "lang": "java", "name": "Wildcard imports should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}], "Modularity": [{"Data responsibility": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2786", "lang": "java", "name": "Nested \"enum\"s should not be declared static", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Whether or not to include non-public methods in the count.", "defaultValue": "true", "type": "BOOLEAN", "key": "countNonpublicMethods"}, {"htmlDesc": "The maximum number of methods authorized in a class.", "defaultValue": "35", "type": "INTEGER", "key": "maximumMethodThreshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1448", "lang": "java", "name": "Classes should not have too many methods", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "sysTags": ["cert", "pitfall"], "repo": "squid", "internalKey": "S1117", "key": "squid:HiddenFieldCheck", "lang": "java", "name": "Local variables should not shadow class fields", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S1444", "lang": "java", "name": "\"public static\" fields should be constant", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of classes a single class is allowed to depend upon", "defaultValue": "20", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "2h", "status": "READY", "debtRemFnOffset": "2h", "tags": [], "htmlDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1200", "lang": "java", "name": "Classes should not be coupled to too many other classes (Single Responsibility Principle)", "defaultDebtRemFnOffset": "2h", "defaultRemFnBaseEffort": "2h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "unpredictable"], "repo": "squid", "key": "squid:S2386", "lang": "java", "name": "Mutable fields should not be \"public static\"", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1450", "lang": "java", "name": "Private fields only used as local variables in methods should become local variables", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "sysTags": ["clumsy", "redundant"], "repo": "squid", "key": "squid:S1185", "lang": "java", "name": "Overriding methods should do more than simply call the same method in the super class", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum allowed lines in an anonymous class/lambda", "defaultValue": "20", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1188", "lang": "java", "name": "Lambdas and anonymous classes should not have too many lines of code", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2390", "lang": "java", "name": "Classes should not access static members of their own subclasses during initialization", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "sysTags": ["multi-threading"], "repo": "squid", "key": "squid:S2885", "lang": "java", "name": "Non-thread-safe fields should not be static", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S3066", "lang": "java", "name": "\"enum\" fields should not be publicly mutable", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum authorized lines in a file.", "defaultValue": "750", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S104", "key": "squid:S00104", "lang": "java", "name": "Files should not have too many lines of code", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "sysTags": ["cwe"], "repo": "squid", "internalKey": "S1104", "key": "squid:ClassVariableVisibilityCheck", "lang": "java", "name": "Class variable fields should not have public accessibility", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1258", "lang": "java", "name": "Classes and enums with private members should have a constructor", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2638", "lang": "java", "name": "Method overrides should not change contracts", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2209", "lang": "java", "name": "\"static\" members should be accessed statically", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"No public instance variables": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2786", "lang": "java", "name": "Nested \"enum\"s should not be declared static", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Whether or not to include non-public methods in the count.", "defaultValue": "true", "type": "BOOLEAN", "key": "countNonpublicMethods"}, {"htmlDesc": "The maximum number of methods authorized in a class.", "defaultValue": "35", "type": "INTEGER", "key": "maximumMethodThreshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1448", "lang": "java", "name": "Classes should not have too many methods", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "sysTags": ["cert", "pitfall"], "repo": "squid", "internalKey": "S1117", "key": "squid:HiddenFieldCheck", "lang": "java", "name": "Local variables should not shadow class fields", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S1444", "lang": "java", "name": "\"public static\" fields should be constant", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of classes a single class is allowed to depend upon", "defaultValue": "20", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "2h", "status": "READY", "debtRemFnOffset": "2h", "tags": [], "htmlDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1200", "lang": "java", "name": "Classes should not be coupled to too many other classes (Single Responsibility Principle)", "defaultDebtRemFnOffset": "2h", "defaultRemFnBaseEffort": "2h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "unpredictable"], "repo": "squid", "key": "squid:S2386", "lang": "java", "name": "Mutable fields should not be \"public static\"", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1450", "lang": "java", "name": "Private fields only used as local variables in methods should become local variables", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "sysTags": ["clumsy", "redundant"], "repo": "squid", "key": "squid:S1185", "lang": "java", "name": "Overriding methods should do more than simply call the same method in the super class", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum allowed lines in an anonymous class/lambda", "defaultValue": "20", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1188", "lang": "java", "name": "Lambdas and anonymous classes should not have too many lines of code", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2390", "lang": "java", "name": "Classes should not access static members of their own subclasses during initialization", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "sysTags": ["multi-threading"], "repo": "squid", "key": "squid:S2885", "lang": "java", "name": "Non-thread-safe fields should not be static", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S3066", "lang": "java", "name": "\"enum\" fields should not be publicly mutable", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum authorized lines in a file.", "defaultValue": "750", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S104", "key": "squid:S00104", "lang": "java", "name": "Files should not have too many lines of code", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "sysTags": ["cwe"], "repo": "squid", "internalKey": "S1104", "key": "squid:ClassVariableVisibilityCheck", "lang": "java", "name": "Class variable fields should not have public accessibility", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1258", "lang": "java", "name": "Classes and enums with private members should have a constructor", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2638", "lang": "java", "name": "Method overrides should not change contracts", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2209", "lang": "java", "name": "\"static\" members should be accessed statically", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"No manager classes": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2786", "lang": "java", "name": "Nested \"enum\"s should not be declared static", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Whether or not to include non-public methods in the count.", "defaultValue": "true", "type": "BOOLEAN", "key": "countNonpublicMethods"}, {"htmlDesc": "The maximum number of methods authorized in a class.", "defaultValue": "35", "type": "INTEGER", "key": "maximumMethodThreshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1448", "lang": "java", "name": "Classes should not have too many methods", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "sysTags": ["cert", "pitfall"], "repo": "squid", "internalKey": "S1117", "key": "squid:HiddenFieldCheck", "lang": "java", "name": "Local variables should not shadow class fields", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S1444", "lang": "java", "name": "\"public static\" fields should be constant", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of classes a single class is allowed to depend upon", "defaultValue": "20", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "2h", "status": "READY", "debtRemFnOffset": "2h", "tags": [], "htmlDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1200", "lang": "java", "name": "Classes should not be coupled to too many other classes (Single Responsibility Principle)", "defaultDebtRemFnOffset": "2h", "defaultRemFnBaseEffort": "2h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "unpredictable"], "repo": "squid", "key": "squid:S2386", "lang": "java", "name": "Mutable fields should not be \"public static\"", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1450", "lang": "java", "name": "Private fields only used as local variables in methods should become local variables", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "sysTags": ["clumsy", "redundant"], "repo": "squid", "key": "squid:S1185", "lang": "java", "name": "Overriding methods should do more than simply call the same method in the super class", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum allowed lines in an anonymous class/lambda", "defaultValue": "20", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1188", "lang": "java", "name": "Lambdas and anonymous classes should not have too many lines of code", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2390", "lang": "java", "name": "Classes should not access static members of their own subclasses during initialization", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "sysTags": ["multi-threading"], "repo": "squid", "key": "squid:S2885", "lang": "java", "name": "Non-thread-safe fields should not be static", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S3066", "lang": "java", "name": "\"enum\" fields should not be publicly mutable", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum authorized lines in a file.", "defaultValue": "750", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S104", "key": "squid:S00104", "lang": "java", "name": "Files should not have too many lines of code", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "sysTags": ["cwe"], "repo": "squid", "internalKey": "S1104", "key": "squid:ClassVariableVisibilityCheck", "lang": "java", "name": "Class variable fields should not have public accessibility", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1258", "lang": "java", "name": "Classes and enums with private members should have a constructor", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2638", "lang": "java", "name": "Method overrides should not change contracts", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2209", "lang": "java", "name": "\"static\" members should be accessed statically", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"No static variables": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2786", "lang": "java", "name": "Nested \"enum\"s should not be declared static", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Whether or not to include non-public methods in the count.", "defaultValue": "true", "type": "BOOLEAN", "key": "countNonpublicMethods"}, {"htmlDesc": "The maximum number of methods authorized in a class.", "defaultValue": "35", "type": "INTEGER", "key": "maximumMethodThreshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1448", "lang": "java", "name": "Classes should not have too many methods", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "sysTags": ["cert", "pitfall"], "repo": "squid", "internalKey": "S1117", "key": "squid:HiddenFieldCheck", "lang": "java", "name": "Local variables should not shadow class fields", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S1444", "lang": "java", "name": "\"public static\" fields should be constant", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of classes a single class is allowed to depend upon", "defaultValue": "20", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "2h", "status": "READY", "debtRemFnOffset": "2h", "tags": [], "htmlDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1200", "lang": "java", "name": "Classes should not be coupled to too many other classes (Single Responsibility Principle)", "defaultDebtRemFnOffset": "2h", "defaultRemFnBaseEffort": "2h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "unpredictable"], "repo": "squid", "key": "squid:S2386", "lang": "java", "name": "Mutable fields should not be \"public static\"", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1450", "lang": "java", "name": "Private fields only used as local variables in methods should become local variables", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "sysTags": ["clumsy", "redundant"], "repo": "squid", "key": "squid:S1185", "lang": "java", "name": "Overriding methods should do more than simply call the same method in the super class", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum allowed lines in an anonymous class/lambda", "defaultValue": "20", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1188", "lang": "java", "name": "Lambdas and anonymous classes should not have too many lines of code", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2390", "lang": "java", "name": "Classes should not access static members of their own subclasses during initialization", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "sysTags": ["multi-threading"], "repo": "squid", "key": "squid:S2885", "lang": "java", "name": "Non-thread-safe fields should not be static", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S3066", "lang": "java", "name": "\"enum\" fields should not be publicly mutable", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum authorized lines in a file.", "defaultValue": "750", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S104", "key": "squid:S00104", "lang": "java", "name": "Files should not have too many lines of code", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "sysTags": ["cwe"], "repo": "squid", "internalKey": "S1104", "key": "squid:ClassVariableVisibilityCheck", "lang": "java", "name": "Class variable fields should not have public accessibility", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1258", "lang": "java", "name": "Classes and enums with private members should have a constructor", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2638", "lang": "java", "name": "Method overrides should not change contracts", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2209", "lang": "java", "name": "\"static\" members should be accessed statically", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"Active classes": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2786", "lang": "java", "name": "Nested \"enum\"s should not be declared static", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Whether or not to include non-public methods in the count.", "defaultValue": "true", "type": "BOOLEAN", "key": "countNonpublicMethods"}, {"htmlDesc": "The maximum number of methods authorized in a class.", "defaultValue": "35", "type": "INTEGER", "key": "maximumMethodThreshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1448", "lang": "java", "name": "Classes should not have too many methods", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "sysTags": ["cert", "pitfall"], "repo": "squid", "internalKey": "S1117", "key": "squid:HiddenFieldCheck", "lang": "java", "name": "Local variables should not shadow class fields", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S1444", "lang": "java", "name": "\"public static\" fields should be constant", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of classes a single class is allowed to depend upon", "defaultValue": "20", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "2h", "status": "READY", "debtRemFnOffset": "2h", "tags": [], "htmlDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1200", "lang": "java", "name": "Classes should not be coupled to too many other classes (Single Responsibility Principle)", "defaultDebtRemFnOffset": "2h", "defaultRemFnBaseEffort": "2h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "unpredictable"], "repo": "squid", "key": "squid:S2386", "lang": "java", "name": "Mutable fields should not be \"public static\"", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1450", "lang": "java", "name": "Private fields only used as local variables in methods should become local variables", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "sysTags": ["clumsy", "redundant"], "repo": "squid", "key": "squid:S1185", "lang": "java", "name": "Overriding methods should do more than simply call the same method in the super class", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum allowed lines in an anonymous class/lambda", "defaultValue": "20", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1188", "lang": "java", "name": "Lambdas and anonymous classes should not have too many lines of code", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2390", "lang": "java", "name": "Classes should not access static members of their own subclasses during initialization", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "sysTags": ["multi-threading"], "repo": "squid", "key": "squid:S2885", "lang": "java", "name": "Non-thread-safe fields should not be static", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S3066", "lang": "java", "name": "\"enum\" fields should not be publicly mutable", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum authorized lines in a file.", "defaultValue": "750", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S104", "key": "squid:S00104", "lang": "java", "name": "Files should not have too many lines of code", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "sysTags": ["cwe"], "repo": "squid", "internalKey": "S1104", "key": "squid:ClassVariableVisibilityCheck", "lang": "java", "name": "Class variable fields should not have public accessibility", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1258", "lang": "java", "name": "Classes and enums with private members should have a constructor", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2638", "lang": "java", "name": "Method overrides should not change contracts", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2209", "lang": "java", "name": "\"static\" members should be accessed statically", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"Get method give minimum info": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2786", "lang": "java", "name": "Nested \"enum\"s should not be declared static", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Whether or not to include non-public methods in the count.", "defaultValue": "true", "type": "BOOLEAN", "key": "countNonpublicMethods"}, {"htmlDesc": "The maximum number of methods authorized in a class.", "defaultValue": "35", "type": "INTEGER", "key": "maximumMethodThreshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1448", "lang": "java", "name": "Classes should not have too many methods", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "sysTags": ["cert", "pitfall"], "repo": "squid", "internalKey": "S1117", "key": "squid:HiddenFieldCheck", "lang": "java", "name": "Local variables should not shadow class fields", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S1444", "lang": "java", "name": "\"public static\" fields should be constant", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of classes a single class is allowed to depend upon", "defaultValue": "20", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "2h", "status": "READY", "debtRemFnOffset": "2h", "tags": [], "htmlDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1200", "lang": "java", "name": "Classes should not be coupled to too many other classes (Single Responsibility Principle)", "defaultDebtRemFnOffset": "2h", "defaultRemFnBaseEffort": "2h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "unpredictable"], "repo": "squid", "key": "squid:S2386", "lang": "java", "name": "Mutable fields should not be \"public static\"", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1450", "lang": "java", "name": "Private fields only used as local variables in methods should become local variables", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "sysTags": ["clumsy", "redundant"], "repo": "squid", "key": "squid:S1185", "lang": "java", "name": "Overriding methods should do more than simply call the same method in the super class", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum allowed lines in an anonymous class/lambda", "defaultValue": "20", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1188", "lang": "java", "name": "Lambdas and anonymous classes should not have too many lines of code", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2390", "lang": "java", "name": "Classes should not access static members of their own subclasses during initialization", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "sysTags": ["multi-threading"], "repo": "squid", "key": "squid:S2885", "lang": "java", "name": "Non-thread-safe fields should not be static", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S3066", "lang": "java", "name": "\"enum\" fields should not be publicly mutable", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum authorized lines in a file.", "defaultValue": "750", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S104", "key": "squid:S00104", "lang": "java", "name": "Files should not have too many lines of code", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "sysTags": ["cwe"], "repo": "squid", "internalKey": "S1104", "key": "squid:ClassVariableVisibilityCheck", "lang": "java", "name": "Class variable fields should not have public accessibility", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1258", "lang": "java", "name": "Classes and enums with private members should have a constructor", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2638", "lang": "java", "name": "Method overrides should not change contracts", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2209", "lang": "java", "name": "\"static\" members should be accessed statically", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"Get method validate input": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2786", "lang": "java", "name": "Nested \"enum\"s should not be declared static", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Whether or not to include non-public methods in the count.", "defaultValue": "true", "type": "BOOLEAN", "key": "countNonpublicMethods"}, {"htmlDesc": "The maximum number of methods authorized in a class.", "defaultValue": "35", "type": "INTEGER", "key": "maximumMethodThreshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1448", "lang": "java", "name": "Classes should not have too many methods", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "sysTags": ["cert", "pitfall"], "repo": "squid", "internalKey": "S1117", "key": "squid:HiddenFieldCheck", "lang": "java", "name": "Local variables should not shadow class fields", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S1444", "lang": "java", "name": "\"public static\" fields should be constant", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of classes a single class is allowed to depend upon", "defaultValue": "20", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "2h", "status": "READY", "debtRemFnOffset": "2h", "tags": [], "htmlDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1200", "lang": "java", "name": "Classes should not be coupled to too many other classes (Single Responsibility Principle)", "defaultDebtRemFnOffset": "2h", "defaultRemFnBaseEffort": "2h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "unpredictable"], "repo": "squid", "key": "squid:S2386", "lang": "java", "name": "Mutable fields should not be \"public static\"", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1450", "lang": "java", "name": "Private fields only used as local variables in methods should become local variables", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "sysTags": ["clumsy", "redundant"], "repo": "squid", "key": "squid:S1185", "lang": "java", "name": "Overriding methods should do more than simply call the same method in the super class", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum allowed lines in an anonymous class/lambda", "defaultValue": "20", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1188", "lang": "java", "name": "Lambdas and anonymous classes should not have too many lines of code", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2390", "lang": "java", "name": "Classes should not access static members of their own subclasses during initialization", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "sysTags": ["multi-threading"], "repo": "squid", "key": "squid:S2885", "lang": "java", "name": "Non-thread-safe fields should not be static", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S3066", "lang": "java", "name": "\"enum\" fields should not be publicly mutable", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum authorized lines in a file.", "defaultValue": "750", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S104", "key": "squid:S00104", "lang": "java", "name": "Files should not have too many lines of code", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "sysTags": ["cwe"], "repo": "squid", "internalKey": "S1104", "key": "squid:ClassVariableVisibilityCheck", "lang": "java", "name": "Class variable fields should not have public accessibility", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1258", "lang": "java", "name": "Classes and enums with private members should have a constructor", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2638", "lang": "java", "name": "Method overrides should not change contracts", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2209", "lang": "java", "name": "\"static\" members should be accessed statically", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}, {"Superclasses are their own class": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S2786", "lang": "java", "name": "Nested \"enum\"s should not be declared static", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Whether or not to include non-public methods in the count.", "defaultValue": "true", "type": "BOOLEAN", "key": "countNonpublicMethods"}, {"htmlDesc": "The maximum number of methods authorized in a class.", "defaultValue": "35", "type": "INTEGER", "key": "maximumMethodThreshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1448", "lang": "java", "name": "Classes should not have too many methods", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>", "sysTags": ["cert", "pitfall"], "repo": "squid", "internalKey": "S1117", "key": "squid:HiddenFieldCheck", "lang": "java", "name": "Local variables should not shadow class fields", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>", "sysTags": ["cert", "cwe"], "repo": "squid", "key": "squid:S1444", "lang": "java", "name": "\"public static\" fields should be constant", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of classes a single class is allowed to depend upon", "defaultValue": "20", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "2h", "status": "READY", "debtRemFnOffset": "2h", "tags": [], "htmlDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1200", "lang": "java", "name": "Classes should not be coupled to too many other classes (Single Responsibility Principle)", "defaultDebtRemFnOffset": "2h", "defaultRemFnBaseEffort": "2h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>", "sysTags": ["cert", "cwe", "unpredictable"], "repo": "squid", "key": "squid:S2386", "lang": "java", "name": "Mutable fields should not be \"public static\"", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1450", "lang": "java", "name": "Private fields only used as local variables in methods should become local variables", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>", "sysTags": ["clumsy", "redundant"], "repo": "squid", "key": "squid:S1185", "lang": "java", "name": "Overriding methods should do more than simply call the same method in the super class", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum allowed lines in an anonymous class/lambda", "defaultValue": "20", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>", "sysTags": ["java8"], "repo": "squid", "key": "squid:S1188", "lang": "java", "name": "Lambdas and anonymous classes should not have too many lines of code", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>When a parent class references a static member of a subclass during its own initialization, the results will not be what you expect because the\nchild class won't exist yet. </p>\n<p>In a best-case scenario, you'll see immediate failures in the code as a result. Worst-case, the damage will be more insidious and difficult to\ntrack down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  public static final int childVersion = Child.version;\n}\n\nclass Child extends Parent {\n  public static final int version = 6;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2390", "lang": "java", "name": "Classes should not access static members of their own subclasses during initialization", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>", "sysTags": ["multi-threading"], "repo": "squid", "key": "squid:S2885", "lang": "java", "name": "Non-thread-safe fields should not be static", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S3066", "lang": "java", "name": "\"enum\" fields should not be publicly mutable", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum authorized lines in a file.", "defaultValue": "750", "type": "INTEGER", "key": "Max"}], "type": "CODE_SMELL", "remFnBaseEffort": "1h", "status": "READY", "debtRemFnOffset": "1h", "tags": [], "htmlDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S104", "key": "squid:S00104", "lang": "java", "name": "Files should not have too many lines of code", "defaultDebtRemFnOffset": "1h", "defaultRemFnBaseEffort": "1h"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "VULNERABILITY", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>", "sysTags": ["cwe"], "repo": "squid", "internalKey": "S1104", "key": "squid:ClassVariableVisibilityCheck", "lang": "java", "name": "Class variable fields should not have public accessibility", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S1258", "lang": "java", "name": "Classes and enums with private members should have a constructor", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>", "sysTags": ["suspicious"], "repo": "squid", "key": "squid:S2638", "lang": "java", "name": "Method overrides should not change contracts", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2209", "lang": "java", "name": "\"static\" members should be accessed statically", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}], "Flexibility": [{"General type": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>", "sysTags": ["misra", "suspicious"], "repo": "squid", "key": "squid:S1219", "lang": "java", "name": "\"switch\" statements should not contain non-case labels", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S3400", "lang": "java", "name": "Methods should not return constants", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"key": "squid:S1067", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per complexity point above the threshold", "remFnOverloaded": false, "mdDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "1min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "Maximum number of allowed conditional operators in an expression", "defaultValue": "3", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per complexity point above the threshold", "remFnGapMultiplier": "1min", "defaultRemFnGapMultiplier": "1min", "lang": "java", "name": "Expressions should not be too complex", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min", "debtRemFnCoeff": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of case", "defaultValue": "30", "type": "INTEGER", "key": "maximum"}], "type": "CODE_SMELL", "remFnBaseEffort": "30min", "status": "READY", "debtRemFnOffset": "30min", "tags": [], "htmlDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1479", "lang": "java", "name": "\"switch\" statements should not have too many \"case\" clauses", "defaultDebtRemFnOffset": "30min", "defaultRemFnBaseEffort": "30min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore\nignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum authorized number of parameters", "defaultValue": "7", "type": "INTEGER", "key": "max"}, {"htmlDesc": "Maximum authorized number of parameters for a constructor", "defaultValue": "7", "type": "INTEGER", "key": "constructorMax"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore\nignored.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S107", "key": "squid:S00107", "lang": "java", "name": "Methods should not have too many parameters", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2176", "lang": "java", "name": "Class names should not shadow interfaces or superclasses", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S1319", "lang": "java", "name": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of lines", "defaultValue": "5", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1151", "lang": "java", "name": "\"switch case\" clauses should not have too many lines of code", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"key": "squid:MethodCyclomaticComplexity", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per complexity point above the threshold", "remFnOverloaded": false, "mdDesc": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "1min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "The maximum authorized complexity.", "defaultValue": "10", "type": "INTEGER", "key": "Threshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S1541", "effortToFixDescription": "per complexity point above the threshold", "remFnGapMultiplier": "1min", "defaultRemFnGapMultiplier": "1min", "lang": "java", "name": "Methods should not be too complex", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min", "debtRemFnCoeff": "1min"}, {"key": "squid:S3776", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per complexity point over the threshold", "remFnOverloaded": false, "mdDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "1min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "The maximum authorized complexity.", "defaultValue": "15", "type": "INTEGER", "key": "Threshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per complexity point over the threshold", "remFnGapMultiplier": "1min", "defaultRemFnGapMultiplier": "1min", "lang": "java", "name": "Cognitive Complexity of methods should not be too high", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min", "debtRemFnCoeff": "1min"}]}, {"Single Purpose": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>", "sysTags": ["misra", "suspicious"], "repo": "squid", "key": "squid:S1219", "lang": "java", "name": "\"switch\" statements should not contain non-case labels", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S3400", "lang": "java", "name": "Methods should not return constants", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"key": "squid:S1067", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per complexity point above the threshold", "remFnOverloaded": false, "mdDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "1min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "Maximum number of allowed conditional operators in an expression", "defaultValue": "3", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per complexity point above the threshold", "remFnGapMultiplier": "1min", "defaultRemFnGapMultiplier": "1min", "lang": "java", "name": "Expressions should not be too complex", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min", "debtRemFnCoeff": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of case", "defaultValue": "30", "type": "INTEGER", "key": "maximum"}], "type": "CODE_SMELL", "remFnBaseEffort": "30min", "status": "READY", "debtRemFnOffset": "30min", "tags": [], "htmlDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1479", "lang": "java", "name": "\"switch\" statements should not have too many \"case\" clauses", "defaultDebtRemFnOffset": "30min", "defaultRemFnBaseEffort": "30min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore\nignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum authorized number of parameters", "defaultValue": "7", "type": "INTEGER", "key": "max"}, {"htmlDesc": "Maximum authorized number of parameters for a constructor", "defaultValue": "7", "type": "INTEGER", "key": "constructorMax"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore\nignored.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S107", "key": "squid:S00107", "lang": "java", "name": "Methods should not have too many parameters", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2176", "lang": "java", "name": "Class names should not shadow interfaces or superclasses", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S1319", "lang": "java", "name": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of lines", "defaultValue": "5", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1151", "lang": "java", "name": "\"switch case\" clauses should not have too many lines of code", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"key": "squid:MethodCyclomaticComplexity", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per complexity point above the threshold", "remFnOverloaded": false, "mdDesc": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "1min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "The maximum authorized complexity.", "defaultValue": "10", "type": "INTEGER", "key": "Threshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S1541", "effortToFixDescription": "per complexity point above the threshold", "remFnGapMultiplier": "1min", "defaultRemFnGapMultiplier": "1min", "lang": "java", "name": "Methods should not be too complex", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min", "debtRemFnCoeff": "1min"}, {"key": "squid:S3776", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per complexity point over the threshold", "remFnOverloaded": false, "mdDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "1min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "The maximum authorized complexity.", "defaultValue": "15", "type": "INTEGER", "key": "Threshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per complexity point over the threshold", "remFnGapMultiplier": "1min", "defaultRemFnGapMultiplier": "1min", "lang": "java", "name": "Cognitive Complexity of methods should not be too high", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min", "debtRemFnCoeff": "1min"}]}, {"Behavior Driven Design": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>", "sysTags": ["misra", "suspicious"], "repo": "squid", "key": "squid:S1219", "lang": "java", "name": "\"switch\" statements should not contain non-case labels", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S3400", "lang": "java", "name": "Methods should not return constants", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"key": "squid:S1067", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per complexity point above the threshold", "remFnOverloaded": false, "mdDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "1min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "Maximum number of allowed conditional operators in an expression", "defaultValue": "3", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per complexity point above the threshold", "remFnGapMultiplier": "1min", "defaultRemFnGapMultiplier": "1min", "lang": "java", "name": "Expressions should not be too complex", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min", "debtRemFnCoeff": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of case", "defaultValue": "30", "type": "INTEGER", "key": "maximum"}], "type": "CODE_SMELL", "remFnBaseEffort": "30min", "status": "READY", "debtRemFnOffset": "30min", "tags": [], "htmlDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1479", "lang": "java", "name": "\"switch\" statements should not have too many \"case\" clauses", "defaultDebtRemFnOffset": "30min", "defaultRemFnBaseEffort": "30min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore\nignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum authorized number of parameters", "defaultValue": "7", "type": "INTEGER", "key": "max"}, {"htmlDesc": "Maximum authorized number of parameters for a constructor", "defaultValue": "7", "type": "INTEGER", "key": "constructorMax"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore\nignored.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S107", "key": "squid:S00107", "lang": "java", "name": "Methods should not have too many parameters", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2176", "lang": "java", "name": "Class names should not shadow interfaces or superclasses", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S1319", "lang": "java", "name": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of lines", "defaultValue": "5", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1151", "lang": "java", "name": "\"switch case\" clauses should not have too many lines of code", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"key": "squid:MethodCyclomaticComplexity", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per complexity point above the threshold", "remFnOverloaded": false, "mdDesc": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "1min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "The maximum authorized complexity.", "defaultValue": "10", "type": "INTEGER", "key": "Threshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S1541", "effortToFixDescription": "per complexity point above the threshold", "remFnGapMultiplier": "1min", "defaultRemFnGapMultiplier": "1min", "lang": "java", "name": "Methods should not be too complex", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min", "debtRemFnCoeff": "1min"}, {"key": "squid:S3776", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per complexity point over the threshold", "remFnOverloaded": false, "mdDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "1min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "The maximum authorized complexity.", "defaultValue": "15", "type": "INTEGER", "key": "Threshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per complexity point over the threshold", "remFnGapMultiplier": "1min", "defaultRemFnGapMultiplier": "1min", "lang": "java", "name": "Cognitive Complexity of methods should not be too high", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min", "debtRemFnCoeff": "1min"}]}, {"Polymorphism": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>", "sysTags": ["misra", "suspicious"], "repo": "squid", "key": "squid:S1219", "lang": "java", "name": "\"switch\" statements should not contain non-case labels", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S3400", "lang": "java", "name": "Methods should not return constants", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"key": "squid:S1067", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per complexity point above the threshold", "remFnOverloaded": false, "mdDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "1min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "Maximum number of allowed conditional operators in an expression", "defaultValue": "3", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per complexity point above the threshold", "remFnGapMultiplier": "1min", "defaultRemFnGapMultiplier": "1min", "lang": "java", "name": "Expressions should not be too complex", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min", "debtRemFnCoeff": "1min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of case", "defaultValue": "30", "type": "INTEGER", "key": "maximum"}], "type": "CODE_SMELL", "remFnBaseEffort": "30min", "status": "READY", "debtRemFnOffset": "30min", "tags": [], "htmlDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1479", "lang": "java", "name": "\"switch\" statements should not have too many \"case\" clauses", "defaultDebtRemFnOffset": "30min", "defaultRemFnBaseEffort": "30min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore\nignored.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum authorized number of parameters", "defaultValue": "7", "type": "INTEGER", "key": "max"}, {"htmlDesc": "Maximum authorized number of parameters for a constructor", "defaultValue": "7", "type": "INTEGER", "key": "constructorMax"}], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore\nignored.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S107", "key": "squid:S00107", "lang": "java", "name": "Methods should not have too many parameters", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>", "sysTags": ["pitfall"], "repo": "squid", "key": "squid:S2176", "lang": "java", "name": "Class names should not shadow interfaces or superclasses", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>", "sysTags": ["bad-practice"], "repo": "squid", "key": "squid:S1319", "lang": "java", "name": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum number of lines", "defaultValue": "5", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1151", "lang": "java", "name": "\"switch case\" clauses should not have too many lines of code", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"key": "squid:MethodCyclomaticComplexity", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per complexity point above the threshold", "remFnOverloaded": false, "mdDesc": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "1min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "The maximum authorized complexity.", "defaultValue": "10", "type": "INTEGER", "key": "Threshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>", "sysTags": ["brain-overload"], "repo": "squid", "internalKey": "S1541", "effortToFixDescription": "per complexity point above the threshold", "remFnGapMultiplier": "1min", "defaultRemFnGapMultiplier": "1min", "lang": "java", "name": "Methods should not be too complex", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min", "debtRemFnCoeff": "1min"}, {"key": "squid:S3776", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per complexity point over the threshold", "remFnOverloaded": false, "mdDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:27+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "1min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "The maximum authorized complexity.", "defaultValue": "15", "type": "INTEGER", "key": "Threshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>", "sysTags": ["brain-overload"], "repo": "squid", "effortToFixDescription": "per complexity point over the threshold", "remFnGapMultiplier": "1min", "defaultRemFnGapMultiplier": "1min", "lang": "java", "name": "Cognitive Complexity of methods should not be too high", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min", "debtRemFnCoeff": "1min"}]}], "Duplications": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there's no need to do so explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "1min", "status": "READY", "debtRemFnOffset": "1min", "tags": [], "htmlDesc": "<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there's no need to do so explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>", "sysTags": ["clumsy"], "repo": "squid", "key": "squid:S1939", "lang": "java", "name": "Extensions and implementations should not be redundant", "defaultDebtRemFnOffset": "1min", "defaultRemFnBaseEffort": "1min"}, {"key": "squid:S1192", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "per duplicate instance", "remFnOverloaded": false, "mdDesc": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\"'\" + a + \"'\");               // Compliant - literal \"'\" has less than 5 characters and is excluded\n  return \"\";                                       // Compliant - literal \"\" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:26+0000", "langName": "Java", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "2min", "remFnType": "LINEAR_OFFSET", "params": [{"htmlDesc": "Number of times a literal must be duplicated to trigger an issue", "defaultValue": "3", "type": "INTEGER", "key": "threshold"}], "type": "CODE_SMELL", "remFnBaseEffort": "2min", "status": "READY", "debtRemFnOffset": "2min", "tags": [], "htmlDesc": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\"'\" + a + \"'\");               // Compliant - literal \"'\" has less than 5 characters and is excluded\n  return \"\";                                       // Compliant - literal \"\" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>", "sysTags": ["design"], "repo": "squid", "effortToFixDescription": "per duplicate instance", "remFnGapMultiplier": "2min", "defaultRemFnGapMultiplier": "2min", "lang": "java", "name": "String literals should not be duplicated", "defaultDebtRemFnOffset": "2min", "defaultRemFnBaseEffort": "2min", "debtRemFnCoeff": "2min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<p>or </p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<p>or </p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>", "sysTags": ["design", "suspicious"], "repo": "squid", "key": "squid:S1871", "lang": "java", "name": "Two branches in a conditional structure should not have exactly the same implementation", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"key": "common-java:DuplicatedBlocks", "debtRemFnType": "LINEAR_OFFSET", "gapDescription": "number of duplicate blocks", "remFnOverloaded": false, "mdDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file", "defaultRemFnType": "LINEAR_OFFSET", "createdAt": "2017-07-19T15:27:25+0000", "langName": "Java", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "LINEAR_OFFSET", "isTemplate": false, "defaultDebtRemFnCoeff": "10min", "remFnType": "LINEAR_OFFSET", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file", "sysTags": ["pitfall"], "repo": "common-java", "effortToFixDescription": "number of duplicate blocks", "remFnGapMultiplier": "10min", "defaultRemFnGapMultiplier": "10min", "lang": "java", "name": "Source files should not have any duplicated blocks", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min", "debtRemFnCoeff": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>When a method loops multiple over the same set of data, whether it's a list or a set of numbers, it is highly likely that the method could be made\nmore efficient by combining the loops into a single set of iterations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:26+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>When a method loops multiple over the same set of data, whether it's a list or a set of numbers, it is highly likely that the method could be made\nmore efficient by combining the loops into a single set of iterations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n</pre>", "sysTags": ["performance"], "repo": "squid", "key": "squid:S3047", "lang": "java", "name": "Multiple loops over the same set should be combined", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S1700", "lang": "java", "name": "A field should not duplicate the name of its containing class", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}], "Code Smells": [{"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) {  // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or</p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "20min", "status": "READY", "debtRemFnOffset": "20min", "tags": [], "htmlDesc": "<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) {  // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or</p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>", "sysTags": ["confusing"], "repo": "squid", "key": "squid:S1994", "lang": "java", "name": "\"for\" loop increment clauses should modify the loops' counters", "defaultDebtRemFnOffset": "20min", "defaultRemFnBaseEffort": "20min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always\nbugs, particularly when the initial value and stop conditions are hard-coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  // Noncompliant\n  // ...\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always\nbugs, particularly when the initial value and stop conditions are hard-coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  // Noncompliant\n  // ...\n</pre>", "sysTags": [], "repo": "squid", "key": "squid:S2252", "lang": "java", "name": "Loop conditions should be true at least once", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    //...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    //...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zYEzAg\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    //...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    //...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zYEzAg\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2251", "lang": "java", "name": "A \"for\" loop update clause should move the counter in the right direction", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>", "sysTags": ["cert", "pitfall", "unused"], "repo": "squid", "key": "squid:S1862", "lang": "java", "name": "Related \"if/else if\" statements should not have the same condition", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>", "sysTags": ["clumsy", "redundant"], "repo": "squid", "key": "squid:S1905", "lang": "java", "name": "Redundant casts should not be used", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements is a key ingredient for making\nwhat's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "CRITICAL", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [{"htmlDesc": "Maximum allowed control flow statement nesting depth.", "defaultValue": "3", "type": "INTEGER", "key": "max"}], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements is a key ingredient for making\nwhat's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>", "sysTags": ["brain-overload"], "repo": "squid", "key": "squid:S134", "lang": "java", "name": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the\n  loop. </li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MAJOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "10min", "status": "READY", "debtRemFnOffset": "10min", "tags": [], "htmlDesc": "<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the\n  loop. </li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>\n</ul>", "sysTags": ["misra", "pitfall"], "repo": "squid", "internalKey": "S127", "key": "squid:ForLoopCounterChangedCheck", "lang": "java", "name": "\"for\" loop stop conditions should be invariant", "defaultDebtRemFnOffset": "10min", "defaultRemFnBaseEffort": "10min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nint j;\nwhile (true) { // Noncompliant; end condition omitted\n  j++;\n}\n\nint k;\nboolean b = true;\nwhile (b) { // Noncompliant; b never written to in loop\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint j;\nwhile (true) { // reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k &lt; Integer.MAX_VALUE;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PYHfAw\">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "BLOCKER", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "BUG", "remFnBaseEffort": "15min", "status": "READY", "debtRemFnOffset": "15min", "tags": [], "htmlDesc": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nint j;\nwhile (true) { // Noncompliant; end condition omitted\n  j++;\n}\n\nint k;\nboolean b = true;\nwhile (b) { // Noncompliant; b never written to in loop\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint j;\nwhile (true) { // reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k &lt; Integer.MAX_VALUE;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PYHfAw\">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>", "sysTags": ["cert"], "repo": "squid", "key": "squid:S2189", "lang": "java", "name": "Loops should not be infinite", "defaultDebtRemFnOffset": "15min", "defaultRemFnBaseEffort": "15min"}, {"langName": "Java", "debtRemFnType": "CONSTANT_ISSUE", "remFnOverloaded": false, "mdDesc": "<p>While it is technically correct to assign to parameters from within method bodies, it reduces code readability because developers won't be able to\ntell whether the original parameter or some temporary variable is being accessed without going through the whole method. Moreover, some developers\nmight also expect assignments of method parameters to be visible to callers, which is not the case, and this lack of visibility could confuse them.\nInstead, all parameters, caught exceptions, and foreach parameters should be treated as <code>final</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    name = name;                    // Noncompliant - useless identity assignment\n  }\n\n  public int add(int a, int b) {\n    a = a + b;                      // Noncompliant\n\n    /* additional logic */\n\n    return a;                       // Seems like the parameter is returned as is, what is the point?\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);                  // Variable \"a\" will still hold 40 after this call\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    this.name = name;               // Compliant\n  }\n\n  public int add(int a, int b) {\n    return a + b;                   // Compliant\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>", "defaultRemFnType": "CONSTANT_ISSUE", "createdAt": "2017-07-19T15:27:27+0000", "debtOverloaded": false, "severity": "MINOR", "defaultDebtRemFnType": "CONSTANT_ISSUE", "isTemplate": false, "remFnType": "CONSTANT_ISSUE", "params": [], "type": "CODE_SMELL", "remFnBaseEffort": "5min", "status": "READY", "debtRemFnOffset": "5min", "tags": [], "htmlDesc": "<p>While it is technically correct to assign to parameters from within method bodies, it reduces code readability because developers won't be able to\ntell whether the original parameter or some temporary variable is being accessed without going through the whole method. Moreover, some developers\nmight also expect assignments of method parameters to be visible to callers, which is not the case, and this lack of visibility could confuse them.\nInstead, all parameters, caught exceptions, and foreach parameters should be treated as <code>final</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    name = name;                    // Noncompliant - useless identity assignment\n  }\n\n  public int add(int a, int b) {\n    a = a + b;                      // Noncompliant\n\n    /* additional logic */\n\n    return a;                       // Seems like the parameter is returned as is, what is the point?\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);                  // Variable \"a\" will still hold 40 after this call\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    this.name = name;               // Compliant\n  }\n\n  public int add(int a, int b) {\n    return a + b;                   // Compliant\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>", "sysTags": ["misra", "pitfall"], "repo": "squid", "key": "squid:S1226", "lang": "java", "name": "Method parameters, caught exceptions and foreach variables should not be reassigned", "defaultDebtRemFnOffset": "5min", "defaultRemFnBaseEffort": "5min"}]}